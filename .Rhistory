facet_wrap(~ decade, ncol = 6)
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
hgram <- qplot(rating, data = movies, binwidth = 1)
mpg
library(ggplot2)
hgram <- qplot(displ, data = mpg, binwidth = 1)
# 主题在被创建时对图形无影响
# 在被绘制时才会影响图形
hgram
library(ggplot2)
hgram <- qplot(carat, data = diamonds, binwidth = 1)
# 主题在被创建时对图形无影响
# 在被绘制时才会影响图形
hgram
library(ggplot2)
hgram <- qplot(price, data = diamonds, binwidth = 1)
# 主题在被创建时对图形无影响
# 在被绘制时才会影响图形
hgram
library(ggplot2)
hgram <- qplot(x, data = diamonds, binwidth = 1)
# 主题在被创建时对图形无影响
# 在被绘制时才会影响图形
hgram
library(ggplot2)
hgram <- qplot(y, data = diamonds, binwidth = 1)
# 主题在被创建时对图形无影响
# 在被绘制时才会影响图形
hgram
library(ggplot2)
hgram <- qplot(z, data = diamonds, binwidth = 1)
# 主题在被创建时对图形无影响
# 在被绘制时才会影响图形
hgram
library(ggplot2)
hgram <- qplot(x, data = diamonds, binwidth = 1)
# 主题在被创建时对图形无影响
# 在被绘制时才会影响图形
hgram
library(ggplot2)
p1 <- qplot(x, data = diamonds, binwidth = 1)
# 主题在被创建时对图形无影响
# 在被绘制时才会影响图形
p1
library(ggplot2)
p1 <- qplot(x, data = diamonds, binwidth = 1)
# 主题在被创建时对图形无影响
# 在被绘制时才会影响图形
p1
previous_theme <- theme_set(theme_bw())
p1
library(ggplot2)
p1 <- qplot(x, data = diamonds, binwidth = 1)
# 主题在被创建时对图形无影响
# 在被绘制时才会影响图形
p1
previous_theme <- theme_set(theme_bw())
p1
# 你可以通过向图形添加主题来覆盖单个图形中的初始主题。
# 此处我们使用的是初始主题。
p1 + previous_theme
library(ggplot2)
hgramt <- hgram + labs(title = "This is a histogram")
hgramt
hgramt + theme(plot.title = element_text(size = 20))
hgramt + theme(plot.title = element_text(size = 20, colour = "red")) hgramt + theme(plot.title = element_text(size = 20, hjust = 0))
library(ggplot2)
hgramt <- hgram + labs(title = "This is a histogram")
hgramt
hgramt + theme(plot.title = element_text(size = 20))
hgramt + theme(plot.title = element_text(size = 20, colour = "red"))
hgramt + theme(plot.title = element_text(size = 20, hjust = 0))
hgramt + theme(plot.title = element_text(size = 20, face = "bold"))
hgramt + theme(plot.title = element_text(size = 20, angle = 180))
hgram + theme(panel.grid.major = element_line(colour = "red"))
hgram + theme (panel.grid.major = element_line(size = 2))
hgram + theme (panel.grid.major = element_line(linetype = "dotted"))
hgram + theme(axis.line = element_line())
hgram + theme(axis.line = element_line(colour = "red"))
hgram + theme(axis.line = element_line(size = 0.5,linetype = "dashed"))
hgram + theme(plot.background = element_rect(fill = "grey80", colour = NA))
hgram + theme(plot.background = element_rect(size = 2))
hgram + theme(plot.background = element_rect(colour = "red"))
hgram + theme (panel.background = element_rect())
hgram + theme(panel.background = element_rect(colour = NA))
hgram + theme(panel.background = element_rect(linetype = "dotted"))
hgramt
last_plot() + theme(panel.grid.minor = element_blank())
last_plot() + theme(panel.grid.major = element_blank())
last_plot() + theme(panel.background = element_blank())
last_plot() + theme(axis.title.x = element_blank(),axis.title.y = element_blank())
last_plot() + theme(axis.line = element_line())
old_theme <- theme_update(
plot.background = element_rect(fill = "#3366FF"),
panel.background = element_rect(fill = "#003DF5"),
axis.text.x = element_text(colour = "#CCFF33"),
axis.text.y = element_text(colour = "#CCFF33", hjust = 1),
axis.title.x = element_text(colour = "#CCFF33", face = "bold"),
axis.title.y = element_text(colour = "#CCFF33", face = "bold", angle = 90))
qplot(cut, data = diamonds, geom = "bar")
old_theme <- theme_update(
plot.background = element_rect(fill = "#3366FF"),
panel.background = element_rect(fill = "#003DF5"),
axis.text.x = element_text(colour = "#CCFF33"),
axis.text.y = element_text(colour = "#CCFF33", hjust = 1),
axis.title.x = element_text(colour = "#CCFF33", face = "bold"),
axis.title.y = element_text(colour = "#CCFF33", face = "bold", angle = 90))
qplot(cut, data = diamonds, geom = "bar")
qplot(cty, hwy, data = mpg)
theme_set(old_theme)
p1 <- qplot(mpg,wt, data = mtcars, colour = factor(cyl))
p1
scale_colour_discrete <- scale_colour_brewer
p1
update_geom_defaults("point", aes(colour = "darkblue"))
qplot(mpg, wt, data=mtcars)
update_stat_defaults("bin", aes(y = ..density..))
qplot(rating, data = movies, geom = "histogram", binvidth = 1)
update_geom_defaults("point", aes(colour = "darkblue"))
qplot(mpg, wt, data=mtcars)
update_stat_defaults("bin", aes(y = ..density..))
qplot(rating, data = movies, geom = "histogram", binwidth = 1)
theme_set(theme bw())
theme_set(theme_bw())
p1 <- qplot(mpg,wt, data = mtcars, colour = factor(cyl))
p1
scale_colour_discrete <- scale_colour_brewer
p1
update_geom_defaults("point", aes(colour = "darkblue"))
qplot(mpg, wt, data=mtcars)
update_stat_defaults("bin", aes(y = ..density..))
qplot(rating, data = movies, geom = "histogram", binwidth = 1)
update_geom_defaults("point", aes(colour = "darkblue"))
qplot(mpg, wt, data=mtcars)
update_stat_defaults("bin", aes(y = ..density..))
qplot(carat, data = dimnames, geom = "histogram", binwidth = 1)
update_geom_defaults("point", aes(colour = "darkblue"))
qplot(mpg, wt, data=mtcars)
update_stat_defaults("bin", aes(y = ..density..))
qplot(mpg, wt, data=mtcars, geom = "histogram", binwidth = 1)
update_geom_defaults("point", aes(colour = "darkblue"))
qplot(mpg, wt, data=mtcars)
qplot(mpg, wt, data = mtcars)
ggsave(file = "output.pdf")
pdf(file = "output.pdf", width = 6, height = 6)
# 在脚本中，你需要明确使用print()来打印图形
qplot(mpg, wt, data = mtcars)
qplot(wt,mpg, data = mtcars)
dev.off()
a <- qplot(date, unemploy, data = economics, geom = "line")
b <- qplot(uempmed, unemploy, data = economics) + geom_smooth(se = F))
a <- qplot(date, unemploy, data = economics, geom = "line")
b <- qplot(uempmed, unemploy, data = economics) + geom_smooth(se = F)
c <- qplot(uempmed, unemploy, data = economics, geom="path")
a <- qplot(date, unemploy, data = economics, geom = "line")
a
b <- qplot(uempmed, unemploy, data = economics) + geom_smooth(se = F)
b
c <- qplot(uempmed, unemploy, data = economics, geom="path")
c
library(grid)
# 一个占据整个图形设备的视图窗口
vp1 <- viewport(width = 1, height = 1,x= 0.5,y = 0.5)
vp1 <- viewport()
# 只占了图形设备一半的宽和高的视图窗口,
# 定位在图形的中间位置
vp2 <- viewport(width = 0.5, height = 0.5,x =0.5,y = 0.5)
vp2 <- viewport(width = 0.5, height = 0.5)
# 一个 2cm x 3cm 的视图窗口，定位在图形设备中心
vp3 <- viewport(width = unit(2, "cm"), height = unit(3, "cm"))
library(grid)
# 一个占据整个图形设备的视图窗口
vp1 <- viewport(width = 1, height = 1,x= 0.5,y = 0.5)
vp1 <- viewport()
vp1
# 只占了图形设备一半的宽和高的视图窗口,
# 定位在图形的中间位置
vp2 <- viewport(width = 0.5, height = 0.5,x =0.5,y = 0.5)
vp2 <- viewport(width = 0.5, height = 0.5)
# 一个 2cm x 3cm 的视图窗口，定位在图形设备中心
vp3 <- viewport(width = unit(2, "cm"), height = unit(3, "cm"))
library(grid)
# 一个占据整个图形设备的视图窗口
vp1 <- viewport(width = 1, height = 1,x= 0.5,y = 0.5)
vp1 <- viewport()
# 只占了图形设备一半的宽和高的视图窗口,
# 定位在图形的中间位置
vp2 <- viewport(width = 0.5, height = 0.5,x =0.5,y = 0.5)
vp2 <- viewport(width = 0.5, height = 0.5)
# 一个 2cm x 3cm 的视图窗口，定位在图形设备中心
vp3 <- viewport(width = unit(2, "cm"), height = unit(3, "cm"))
# 在右上角的视图窗口
vp4 <- vievport(x = 1, y = 1, just = c("top", "right"))
# 在右上角的视图窗口
vp4 <- viewport(x = 1, y = 1, just = c("top", "right"))
# 在右上角的视图窗口
vp4 <- viewport(x = 1, y = 1, just = c("top", "right"))
# 在右上角的视图窗口
vp4 <- viewport(x = 1, y = 1, just = c("top", "right"))
pdf("polishing-subplot-1.pdf",width = 4,height = 4)
subvp <- viewport(width = 0.4,height =0.4,x =0.75,y =0.35)
b
print(c,vp = subvp)
dev.off()
csmall <-c + theme_gray(9) + labs(x = NULL,y = NULL) + theme(plot.margin = unit(rep(0,4),"lines")) pdf("polishing-subplot-2.pdf",width =4,height =4)
csmall <- c + theme_gray(9) + labs(x = NULL,y = NULL) + theme(plot.margin = unit(rep(0,4),"lines")) pdf("polishing-subplot-2.pdf",width =4,height =4)
csmall <- c + theme_gray(9) + labs(x = NULL,y = NULL) + theme(plot.margin = unit(rep(0,4),"lines"))
pdf("polishing-subplot-2.pdf",width =4,height =4)
b
print(csmall,vp = subvp)
dev.off()
pdf("polishing-layout.pdf",width = 8,height = 6)
grid.newpage()
pushViewport(viewport(layout = grid.layout(2,2)))
vplayout <- function(x,y)viewport(layout.pos.row = x,layout.pos.col = y)
print(a,vp = vplayout(1,1:2))
print(b,vp = vplayout(2,1))
print(c,vp = vplayout(2,2))
dev.off()
dimnames
View(carat)
View(mtcars)
View(mpg2)
View(mpg3)
View(mpg4)
View(movies)
library(ggplot2)
hgram <- qplot(imdb_rating,data = movies,binwidth =1)
hgramt <- hgram + labs(title = "This is a histogram")
hgramt
hgramt + theme(plot.title = element_text(size = 20))
hgramt + theme(plot.title = element_text(size = 20, colour = "red"))
hgramt + theme(plot.title = element_text(size = 20, hjust = 0))
hgramt + theme(plot.title = element_text(size = 20, face = "bold"))
hgramt + theme(plot.title = element_text(size = 20, angle = 180))
moves
movies
??movies
library(ggplot2)
hgram <- qplot(mpg, wt, data=mtcars)
hgramt <- hgram + labs(title = "This is a histogram")
hgramt
hgramt + theme(plot.title = element_text(size = 20))
hgramt + theme(plot.title = element_text(size = 20, colour = "red"))
hgramt + theme(plot.title = element_text(size = 20, hjust = 0))
hgramt + theme(plot.title = element_text(size = 20, face = "bold"))
hgramt + theme(plot.title = element_text(size = 20, angle = 180))
library(ggplot2)
hgram <- qplot(mpg, data=mtcars)
hgramt <- hgram + labs(title = "This is a histogram")
hgramt
hgramt + theme(plot.title = element_text(size = 20))
hgramt + theme(plot.title = element_text(size = 20, colour = "red"))
hgramt + theme(plot.title = element_text(size = 20, hjust = 0))
hgramt + theme(plot.title = element_text(size = 20, face = "bold"))
hgramt + theme(plot.title = element_text(size = 20, angle = 180))
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
# 选取各个颜色里最小的钻石
ddply(diamonds,.(color),subset,carat == min(carat))
# 选取最小的两颗钻石
ddply(diamonds,.(color),subset,order(carat) <= 2)
# 选取每组里大小为前1%的钻石
ddply(diamonds,.(color),subset,carat > quantile(carat,0.99))
# 选出所有比组平均值大的钻石
ddply(diamonds,.(color),subset,price > mean(price))
# 选取各个颜色里最小的钻石
f1 <- ddply(diamonds,.(color),subset,carat == min(carat))
head(f1)
# 选取最小的两颗钻石
f2 <- ddply(diamonds,.(color),subset,order(carat) <= 2)
head(f2)
# 选取每组里大小为前1%的钻石
f3 <- ddply(diamonds,.(color),subset,carat > quantile(carat,0.99))
head(f3)
# 选出所有比组平均值大的钻石
f4 <- ddply(diamonds,.(color),subset,price > mean(price))
head(f4)
# 把每个颜色组里钻石的价格标准化，使其均值为0，方差为1
f5 <- ddply(diamonds,.(color),transform,price = scale(price))
head(f5)
# 减去组均值
f6 <- ddply(diamonds,.(color),transform,price = price-mean(price))
head(f6)
nmissing <- function(x)sum(is.na(x))
nmissing(msleepname)
nmissing <- function(x)sum(is.na(x))
nmissing(msleep$name)
nmissing <- function(x)sum(is.na(x))
nmissing(msleep$name)
nmissing(msleep$brainwt)
nmissing_df <- colwise(nmissing)
nmissing_df(msleep)
nmissing <- function(x)sum(is.na(x))
nmissing(msleep$name)
nmissing(msleep$brainwt)
nmissing_df <- colwise(nmissing)
nmissing_df(msleep)
# 更便捷的方法
colwise(nmissing)(msleep)
msleep2 <- msleep[,-6] # 移除第六列
numcolwise(median)(msleep2,na.rm = T)
numcolwise(quantile)(msleep2,na.rm = T)
msleep2 <- msleep[,-6] # 移除第六列
numcolwise(median)(msleep2,na.rm = T)
numcolwise(quantile)(msleep2,na.rm = T)
numcolwise(quantile)(msleep2,probs = c(0.25,0.75), na.rm = T)
ddply(msleep2,.(vore),numcolwise(median),na.rm = T)
ddply(msleep2,.(vore),numcolwise(mean),na.rm = T)
my_summary <- function(df){
with(df,data.frame(
pc_cor = cor(price,carat,method = "spearman"),
lpc_cor = cor(log(price),log(carat))
))
}
ddply(diamonds,.(cut),my_summary)
my_summary <- function(df){
with(df,data.frame(
pc_cor = cor(price,carat,method = "spearman"),
lpc_cor = cor(log(price),log(carat))
))
}
ddply(diamonds,.(cut),my_summary)
ddply(diamonds,.(color),my_summary)
qplot(carat,price,data = diamonds,geom ="smooth", colour = color)
dense <-subset(diamonds,carat = 2)
qplot(carat,price,data = dense,geom ="smooth", colour = color,fullrange = TRUE)
?stat_smooth
library(mgcv)
smooth <- function(df){
mod <- gam(price ~ s(carat,bs "cs"),data = df)
library(mgcv)
smooth <- function(df){
mod <- gam(price ~ s(carat,bs = "cs"),data = df)
grid <- data.frame(carat = seq(0.2,2,length = 50))
pred <- predict(mod,grid,se =T)
grid$price <- pred$fit
grid$se <- pred$se.fit
grid
}
smoothes <- ddply(dense,.(color),smooth)
qplot(carat,price,data = smoothes,colour = color, geom = "line")
qplot(carat,price,data = smoothes,colour = color, geom = "smooth",ymax = price + 2 * se,
ymin = price - 2 * se)
mod <- gam(price ~s(carat,bs = "cs") + color,data =dense)
grid <- with(diamonds,expand.grid(
carat = seq(0.2,2,length =50), color = levels(color)
))
grid$pred <- predict(mod,grid)
qplot(carat,pred,data = grid,colour = color,geom = "line")
ggplot(economics,aes(date)) + geom_line(aes(y = unemploy,colour = "unemploy")) +
geom_line(aes(y = uempmed,colour = "uempmed")) + scale_colour_hue("variable")
require(reshape2)
emp <- melt(economics,id = "date",measure = c("unemploy","uempmed"))
qplot(date,value,data emp,geom = "line",colour = variable)
ggplot(economics,aes(date)) + geom_line(aes(y = unemploy,colour = "unemploy")) +
geom_line(aes(y = uempmed,colour = "uempmed")) + scale_colour_hue("variable")
require(reshape2)
emp <- melt(economics,id = "date",measure = c("unemploy","uempmed"))
qplot(date,value,data = emp,geom = "line",colour = variable)
range01 <- function(x){
rng <- range(x,na.rm = TRUE)
(x - rng[1])/diff(rng)
}
emp2 <- ddply(emp,.(variable),transform,value = range01(value))
qplot(date,value,data = emp2,geom = "line",
range01 <- function(x){
rng <- range(x,na.rm = TRUE)
(x - rng[1])/diff(rng)
}
emp2 <- ddply(emp,.(variable),transform,value = range01(value))
qplot(date,value,data = emp2,geom = "line",colour = variable,linetype = variable)
qplot(date,value,data = emp,geom ="line") + facet_grid(variable ~.scales = "free_y")
range01 <- function(x){
rng <- range(x,na.rm = TRUE)
(x - rng[1])/diff(rng)
}
emp2 <- ddply(emp,.(variable),transform,value = range01(value))
qplot(date,value,data = emp2,geom = "line",colour = variable,linetype = variable)
qplot(date,value,data = emp,geom ="line") + facet_grid(variable ~.,scales = "free_y")
popular <- subset(movies,votes > 1e4)
qplot(displ,cty,data = mpg) + geom_smooth(method = "lm")
mpgmod <- lm(cty = displ,data = mpg)
qplot(displ,cty,data = mpg) + geom_smooth(method = "lm")
mpgmod <- lm(cty ~ displ,data = mpg)
mod <- lm(cty ~ displ,data = mpg)
basic <- ggplot(mod,aes(.fitted,.resid)) +
geom_hline(yintercept = 0,colour ="grey50",size = 0.5) + geom_point() +
geom_smooth(size =0.5,se = F)
basic
basic + aes(y = .stdresid)
basic + aes(size = .cooksd) + scale_size_area("Cook's distance")
full <- basic %+% fortify(mod,mpg)
full + aes(colour = factor(cyl))
full + aes(displ,colour = factor(cyl))
install.packages('EBImage')
fortify.Image <-function(model,data,...){
colours <- channel(model,"x11")
colours <- colours[,rev(seq_len(ncol(colours)))]
melt (colours,c("x","y"))
}
qplot(x,y,data = img,fill = value,geom="tile") + scale_fill_identity() + coord_equal()
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
library(ggplot2)
qplot(x,y,data = diamonds,na.rm = TRUE)
last_plot() + xlim(3,11) + ylim(3,11)
last_plot() + xlim(4,10) + ylim(4,10)
last_p1ot()  +xlim(4,5) + ylim(4,5)
library(ggplot2)
qplot(x,y,data = diamonds,na.rm = TRUE)
last_plot() + xlim(3,11) + ylim(3,11)
last_plot() + xlim(4,10) + ylim(4,10)
last_plot()  +xlim(4,5) + ylim(4,5)
library(ggplot2)
qplot(x,y,data = diamonds,na.rm = TRUE)
last_plot() + xlim(3,11) + ylim(3,11)
last_plot() + xlim(4,10) + ylim(4,10)
last_plot() + xlim(4,5) + ylim(4,5)
last_plot() + xlim(4,4.5) + ylim(4,4.5)
last_plot() + geom_abline(colour = "red")
qplot(x,y,data = diamonds,na.rm =T) + geom_abline(colour = "red") + xlim(4,4.5) + ylim(4,4.5)
gradient_rb <- scale_colour_gradient(low = "red",high = "blue")
qplot(cty,hwy,data = mpg,colour = displ) + gradient_rb
qplot(bodywt,brainwt,data = msleep,colour = awake,log = "xy") + gradient_rb
# 原书中的NA替换为了NULL,向量c()换成了列表list()
xquiet <- scale_x_continuous("",breaks = NULL)
yquiet <- scale_y_continuous("",breaks = NULL)
quiet <- list(xquiet,yquiet)
qplot(mpg,wt,data = mtcars) + quiet
qplot(displ,cty,data = mpg) + quiet
install.packages('splines')
install.packages("splines")
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
geom_lm <- function(formula=y~x){
geom_smooth(formula = formula,se = FALSE,method = "lm")}
qplot(mpg,wt,data = mtcars) + geom_lm()
library(ggplot2)
geom_lm <- function(formula=y~x){
geom_smooth(formula = formula,se = FALSE,method = "lm")}
qplot(mpg,wt,data = mtcars) + geom_lm()
library(splines)
qplot(mpg,wt,data = mtcars) + geom_lm(y ~ ns(x,3))
# 译者注：请加载reshape2、plyr包，并运行9.2节中自定义的range01()函数
library(reshape2)
library(plyr)
range01 <- function(x){
rng <- range(x,na.rm = TRUE)
(x - rng[1])/diff(rng)
}
pcp_data <- function(df){
numeric <- laply(df,is.numeric)
# 每一列的数值调整到相同的范围
df[numeric] <- colwise(range01)(df[numeric])
# 行名作为行识别信息
df$.row <- rownames(df)
# Melt将非数值变量作为id.vars
dfm <- melt(df,id = c(".row",names(df)[!numeric]))
# 给数据框添加PCP类
class(dfm) <- c("pcp",class(dfm))
dfm
}
pcp <- function(df,...){
df <- pcp_data(df)
ggplot(df,aes(variable,value)) + geom_line(aes(group =.row))}
pcp(mpg) #绘制平行坐标图
# 译者注：请加载reshape2、plyr包，并运行9.2节中自定义的range01()函数
library(reshape2)
library(plyr)
range01 <- function(x){
rng <- range(x,na.rm = TRUE)
(x - rng[1])/diff(rng)
}
pcp_data <- function(df){
numeric <- laply(df,is.numeric)
# 每一列的数值调整到相同的范围
df[numeric] <- colwise(range01)(df[numeric])
# 行名作为行识别信息
df$.row <- rownames(df)
# Melt将非数值变量作为id.vars
dfm <- melt(df,id = c(".row",names(df)[!numeric]))
# 给数据框添加PCP类
class(dfm) <- c("pcp",class(dfm))
dfm
}
pcp <- function(df,...){
df <- pcp_data(df)
ggplot(df,aes(variable,value)) + geom_line(aes(group =.row))}
pcp(mpg)
# 译者注：请加载reshape2、plyr包，并运行9.2节中自定义的range01()函数
library(reshape2)
library(plyr)
range01 <- function(x){
rng <- range(x,na.rm = TRUE)
(x - rng[1])/diff(rng)
}
pcp_data <- function(df){
numeric <- laply(df,is.numeric)
# 每一列的数值调整到相同的范围
df[numeric] <- colwise(range01)(df[numeric])
# 行名作为行识别信息
df$.row <- rownames(df)
# Melt将非数值变量作为id.vars
dfm <- melt(df,id = c(".row",names(df)[!numeric]))
# 给数据框添加PCP类
class(dfm) <- c("pcp",class(dfm))
dfm
}
pcp <- function(df,...){
df <- pcp_data(df)
ggplot(df,aes(variable,value)) + geom_line(aes(group =.row))
}
pcp(mpg)
pcp(mpg) + aes(colour=drv)
