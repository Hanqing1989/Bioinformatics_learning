loc <- "http://archive.ics.uci.edu/ml/machine-learning-databases/"
ds <- "pima-indians-diabetes/pima-indians-diabetes.data"
url <- paste(loc,ds,sep="")
diabetes <- read.table(url,sep=",",header=FALSE)
loc <- "http://archive.ics.uci.edu/ml/machine-learning-databases/"
ds <- "pima-indians-diabetes/pima-indians-diabetes.data"
url <- paste(loc,ds,sep="")
diabetes <- read.table(url,sep=",",header=FALSE)
library(rattle)
loc <- "http://archive.ics.uci.edu/ml/machine-learning-databases/"
ds <- "pima-indians-diabetes/pima-indians-diabetes.data"
url <- paste(loc,ds,sep="")
diabetes <- read.table(url,sep=",",header=FALSE)
library(rattle)
loc <- "http://archive.ics.uci.edu/ml/machine-learning-databases/"
ds <- "pima-indians-diabetes/pima-indians-diabetes.data"
url <- paste(loc,ds,sep="")
diabetes <- read.table(url,sep=",",header=FALSE)
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
passed <- c(TRUE,TRUE,FALSE, TRUE)
ages <- c(15,18,25,14,19)
cmplxNums <- c(1+2i,0+1i,39+3i,12+2i)
names <- c("Bob","Ted","Carol","Alice")
x <- c(1,2,3,4,5,6,7,8)
class(x)
print(x)
attr(x,"dim") <- c(2,4)
# 对象x现在变成了matrix类的2×4矩阵
print(x)
attr(x,"dim") <- c(2,4)
# 对象x现在变成了matrix类的2×4矩阵
print(x)
class(x)
attributes(x<!---->)
attr(x,"dim") <- c(2,4)
# 对象x现在变成了matrix类的2×4矩阵
print(x)
class(x)
attributes(x)
attr(x,"dimnames") <- list (c("A1","A2"),c("B1","B2","B3","B4"))
print(x)
attr(x,"dim") < -NULL
attr(x,"dim") <- NULL
class(x)
print(x)
head(iris)
unclass(iris)
attributes(iris)
set.seed(1234)
fit <- kmeans(iris[1:4],3)
names(fit)
names(fit)
unclass(fit)
sapply(fit,class)
x <- c(20,30,40)
x[3]
x[c(2,3)]
x <- c(A=20,B=30,C=40)
x[c(2,3)]
x[c("B","C")]
fit[c(2,7)]
fit[2]
fit[[2]]
fit$centers
fit[[2]][1,]
# 获取聚类均值
set.seed(1234)
fit1 <- kmeans(iris[1:4],3)
means <- fit1$centers
# 重塑数据长表
library(reshape2)
dfm <- melt(means)
names(dfm) <- c("Cluster","Measurement","Centimeters")
dfm$cluster <- factor(dfm$cluster)
# 获取聚类均值
set.seed(1234)
fit1 <- kmeans(iris[1:4],3)
means <- fit1$centers
# 重塑数据长表
library(reshape2)
dfm <- melt(means)
names(dfm) <- c("Cluster","Measurement","Centimeters")
dfm$Cluster <- factor(dfm$Cluster)
head(dfm)
# 获取聚类均值
set.seed(1234)
fit1 <- kmeans(iris[1:4],3)
means <- fit1$centers
# 重塑数据长表
library(reshape2)
dfm <- melt(means)
names(dfm) <- c("Cluster","Measurement","Centimeters")
dfm$Cluster <- factor(dfm$Cluster)
head(dfm)
# 绘制线图
library(ggplot2)
ggplot(data=dfm,aes(x=Measurement,y=Centimeters,group=Cluster)) +
geom_point(size=3,aes(shape=Cluster,color=Cluster)) + geom_line(size=1,aes(color=Cluster)) +
ggtitle("Profiles for Iris Clusters")
3+2+5
3 + 2 +
5
for(i in 1:5)
print(1:i)
for(i in 1:5)
print(1:i)
for(i in 5:1)
print (1:i)
if(interactive()){
plot (x,y)
} else {
png("myplot png")
plot(x,y)
dev.off()
}
pvalues <- c(.0867,.0018,.0054,.1572,.0183,.5386)
results <- ifelse(pvalues <.05,"Significant","Not Significant")
results
results <-vector(mode="character",length=length(pvalues))
for(i in 1:length(pvalues)){
if(pvalues[i]<.05)
results[i] <- "Significant"
else results [i] <- "Not Significant"
}
f <- function(x,y, z=1){
result <- x+(2*y)+(3*z)
return(result)
}
f <- function(x,y, z=1){
result <- x+(2*y)+(3*z)
return(result)
}
f(2,3,4)
f(2,3)
f(x=2,y=3)
f(z=4,y=2,3)
args(f)
x <- 2
y <- 3
z <- 4
f1 <- function(w){
z <-2
x <- w*y*z
return(x)
}
f1(x)
x
y
z
x <- 5
myenv <- new.env()
assign("x","Homer",env=myenv)
ls()
ls(myenv)
x
get("x",env=myenv)
myenv <- new.env()
myenv$x <- "Homer"
myenv$x
parent.env(myenv)
trim <- function(p){
trimit <-function(x){
n <- length(x)
lo <- floor(n*p) + 1
hi <- n + 1 - lo
x <- sort.int(x,partial = unique(c(lo,hi)))[lo:hi]
}
trimit
}
x <- 1:10
trim10pct <- trim(.1)
y <- trim10pct(x)
y
x <- 1:10
trim10pct <- trim(.1)
y <- trim10pct(x)
y
trim20pct <- trim(.2)
y <- trim20pct(x)
y
ls(environment(trim10pct))
get("p",env=environment(trim10pct))
makeFunction <- function(k){
f <- function(x){
print(x + k)
}
}
g <- makeFunction(10)
g(4)
k <- 2
g(5)
ls(environment(g))
environment(g)$k
summary(women)
fit2 <- lm(weight ~ height,data=women)
summary(fit2)
summary
class(women)
class(fit2)
methods(summary)
# 定义泛型函数
mymethod <-function(x,...) UseMethod("mymethod")
mymethod.a <- function(x) print("Using A")
mymethod.b <-function(x) print("Using B")
mymethod.default <- function(x) print("Using Default")
x <- 1:5
y <- 6:10
z <- 10:15
# 给对象分配类
class(x) <- "a"
class(y) <- "b"
# 把泛型函数应用到对象中
mymethod(x)
mymethod(y)
mymethod(z)
# 把泛型函数应用到包含两个类的对象中
class(z) <- c("a","b")
mymethod(z)
# 泛型函数没有默认为"c"的类
class(z) <- c("c","a","b")
mymethod(z)
class(women) <- "lm"
summary(women)
my.data.frame <- read.table(mytextfile,header=TRUE,sep=',',
colClasses=c("numeric","numeric","character",
NULL,"numeric",NULL,"character",NULL,NULL,NULL))
set.seed(1234)
mymatrix <- matrix(rnorm(10000000),ncol=10)
accum <- function(x){
sums <- numeric(ncol(x))
for (i in 1:ncol(x)){
for(j in 1:nrow(x)){
sums[i] <- sums[i] + x[j,i]
}
}
}
system.time(accum(mymatrix))
system.time(colSums(mymatrix))
set.seed(1234)
k <- 100000
x <- rnorm(k)
y <- 0
system.time(for (i in 1:length(x)) y[i] <- x[i]^2)
y <- numeric(length=k)
system.time(for (i in 1:k) y[i] <- x[i]^2)
y <- numeric(length=k)
system.time(y <- x^2)
install.packages('doParallel')
install.packages('foreach')
# 加载包并登记内核数量
library(foreach)
library(doParallel)
registerDoParallel(cores=2)
# 定义函数
eig <- function(n,p){
x <- matrix(rnorm(100000),ncol=100)
r <- cor(x)
eigen(r)$values
}
n <- 1000000
p <- 100
k <- 500
# 正常执行
system.time(
x <- foreach(i=1:k,.combine=rbind) %do% eig(n,p)
)
# 并行执行
system.time(
x <- foreach(i=1:k,.combine=rbind) %dopar% eig(n,p)
)
mtcars$Transmission <- factor(mtcarssa,levels=c(1,2),labels=c("Automatic","Manual"))
mtcars$Transmission <- factor(mtcars$a,levels=c(1,2),labels=c("Automatic","Manual"))
aov(mpg ~ Transmission,data=mtcars)
head(mtcars[c("mpg","Transmission")])
head(mtcars[c("mpg","Transmission")])
table(mtcars$Transmission)
# 查看形式参数
args(mad)
function(x,center = median(x),constant = 1.4826,na.rm = FALSE,low = FALSE,high = FALSE)
NULL
debug(mad)
# 设置调试函数
mad(1:10)
# 查看形式参数
args(mad)
function(x,center = median(x),constant = 1.4826,na.rm = FALSE,low = FALSE,high = FALSE)
NULL
debug(mad)
# 设置调试函数
mad(1:10)
# 列出对象
Browse[2]> ls()
# 查看形式参数
args(mad)
function(x,center = median(x),constant = 1.4826,na.rm = FALSE,low = FALSE,high = FALSE)
NULL
debug(mad)
# 设置调试函数
mad(1:10)
# 列出对象
Browse[2]> ls()
head(mtcars[c("mpg","Transmission")])
table(mtcars$Transmission)
?aggregate
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
par(ask=TRUE)
opar <- par(no.readonly=TRUE) # save original parameters
library(multcomp)
attach(cholesterol)
table(trt)
aggregate(response, by=list(trt), FUN=mean)
aggregate(response, by=list(trt), FUN=sd)
fit <- aov(response ~ trt)
summary(fit)
library(gplots)
plotmeans(response ~ trt, xlab="Treatment", ylab="Response",
main="Mean Plot\nwith 95% CI")
detach(cholesterol)
?table
TukeyHSD(fit)
par(las=1)
par(mar=c(5,8,4,2))
plot(TukeyHSD(fit))
par(opar)
# Multiple comparisons the multcomp package
library(multcomp)
par(mar=c(5,4,6,2))
tuk <- glht(fit, linfct=mcp(trt="Tukey"))
plot(cld(tuk, level=.05),col="lightgrey")
par(opar)
library(car)
qqPlot(lm(response ~ trt, data=cholesterol),
simulate=TRUE, main="Q-Q Plot", labels=FALSE)
bartlett.test(response ~ trt, data=cholesterol)
library(car)
outlierTest(fit)
data(litter, package="multcomp")
attach(litter)
table(dose)
aggregate(weight, by=list(dose), FUN=mean)
fit <- aov(weight ~ gesttime + dose)
summary(fit)
?aov
# Obtaining adjusted means
library(effects)
effect("dose", fit)
library(multcomp)
contrast <- rbind("no drug vs. drug" = c(3, -1, -1, -1))
summary(glht(fit, linfct=mcp(dose=contrast)))
library(multcomp)
fit2 <- aov(weight ~ gesttime*dose, data=litter)
summary(fit2)
# Visualizing a one-way ANCOVA
library(HH)
ancova(weight ~ gesttime + dose, data=litter)
attach(ToothGrowth)
table(supp,dose)
aggregate(len, by=list(supp,dose), FUN=mean)
aggregate(len, by=list(supp,dose), FUN=sd)
dose <- factor(dose)
fit <- aov(len ~ supp*dose) # fit1<- aov(len~supp+dose+supp:dose)
summary(fit)
attach(ToothGrowth)
table(supp,dose)
aggregate(len, by=list(supp,dose), FUN=mean)
aggregate(len, by=list(supp,dose), FUN=sd)
dose <- factor(dose)
fit3 <- aov(len ~ supp*dose) # fit1 <- aov(len~supp+dose+supp:dose)
summary(fit3)
# plotting interactions
interaction.plot(dose, supp, len, type="b",
col=c("red","blue"), pch=c(16, 18),
main = "Interaction between Dose and Supplement Type")
library(gplots)
plotmeans(len ~ interaction(supp, dose, sep=" "),
connect=list(c(1, 3, 5),c(2, 4, 6)),
col=c("red","darkgreen"),
main = "Interaction Plot with 95% CIs",
xlab="Treatment and Dose Combination")
library(HH)
interaction2wt(len~supp*dose)
CO2$conc <- factor(CO2$conc)
w1b1 <- subset(CO2, Treatment=='chilled')
fit <- aov(uptake ~ (conc*Type) + Error(Plant/(conc)), w1b1)
summary(fit)
par(las=2)
par(mar=c(10,4,4,2))
with(w1b1,
interaction.plot(conc,Type,uptake,
type="b", col=c("red","blue"), pch=c(16,18),
main="Interaction Plot for Plant Type and Concentration"))
boxplot(uptake ~ Type*conc, data=w1b1, col=(c("gold","green")),
main="Chilled Quebec and Mississippi Plants",
ylab="Carbon dioxide uptake rate (umol/m^2 sec)")
par(opar)
CO2$conc <- factor(CO2$conc)
w1b1 <- subset(CO2, Treatment=='chilled')
fit4 <- aov(uptake ~ (conc*Type) + Error(Plant/(conc)), w1b1)
summary(fit4)
par(las=1)
par(mar=c(10,4,4,2))
with(w1b1,
interaction.plot(conc,Type,uptake,
type="b", col=c("red","blue"), pch=c(16,18),
main="Interaction Plot for Plant Type and Concentration"))
boxplot(uptake ~ Type*conc, data=w1b1, col=(c("gold","green")),
main="Chilled Quebec and Mississippi Plants",
ylab="Carbon dioxide uptake rate (umol/m^2 sec)")
par(opar)
CO2$conc <- factor(CO2$conc)
w1b1 <- subset(CO2, Treatment=='chilled')
fit4 <- aov(uptake ~ (conc*Type) + Error(Plant/(conc)), w1b1)
summary(fit4)
par(las=2)
par(mar=c(10,4,4,2))
with(w1b1,
interaction.plot(conc,Type,uptake,
type="b", col=c("red","blue"), pch=c(16,18),
main="Interaction Plot for Plant Type and Concentration"))
boxplot(uptake ~ Type*conc, data=w1b1, col=(c("gold","green")),
main="Chilled Quebec and Mississippi Plants",
ylab="Carbon dioxide uptake rate (umol/m^2 sec)")
par(opar)
# 重复测量方差分析案例2
Example8_12  <- read.table ("example8_12.csv", header=TRUE, sep=",")
attach(Example8_12)
type  <-factor(type, order=FALSE)
time  <-factor(time, order=FALSE)
subject  <-factor(subject, order=FALSE)
fit <- aov(rate ~type*time +Error(subject/time))
summary(fit)
detach(Example8_12)
# 重复测量方差分析案例3
Example8_13  <- read.table ("example8_13.csv", header=TRUE, sep=",")
attach(Example8_13)
a  <-factor(a, order=FALSE)
b  <-factor(b, order=FALSE)
s  <-factor(s, order=FALSE)
time  <-factor(time, order=FALSE)
fit <- aov(y ~a*b*time +Error(s/time))
# 重复测量方差分析案例2
Example8_12  <- read.table ("example8_12.csv", header=TRUE, sep=",")
attach(Example8_12)
type  <-factor(type, order=FALSE)
time  <-factor(time, order=FALSE)
subject  <-factor(subject, order=FALSE)
fit5 <- aov(rate ~type*time +Error(subject/time))
summary(fit5)
detach(Example8_12)
# 重复测量方差分析案例3
Example8_13  <- read.table ("example8_13.csv", header=TRUE, sep=",")
attach(Example8_13)
a  <-factor(a, order=FALSE)
b  <-factor(b, order=FALSE)
s  <-factor(s, order=FALSE)
time  <-factor(time, order=FALSE)
fit6 <- aov(y ~a*b*time +Error(s/time))
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
# 重复测量方差分析案例2
Example8_12  <- read.table ("example8_12.csv", header=TRUE, sep=",")
attach(Example8_12)
type <- factor(type, order=FALSE)
time <- factor(time, order=FALSE)
subject <- factor(subject, order=FALSE)
fit5 <- aov(rate ~type*time + Error(subject/time))
summary(fit5)
detach(Example8_12)
# 重复测量方差分析案例3
Example8_13  <- read.table ("example8_13.csv", header=TRUE, sep=",")
attach(Example8_13)
a <- factor(a, order=FALSE)
b <- factor(b, order=FALSE)
s <- factor(s, order=FALSE)
time <- factor(time, order=FALSE)
fit6 <- aov(y ~ a*b*time + Error(s/time))
# 重复测量方差分析案例3
Example8_13  <- read.table ("example8_13.csv", header=TRUE, sep=",")
attach(Example8_13)
a <- factor(a, order=FALSE)
b <- factor(b, order=FALSE)
s <- factor(s, order=FALSE)
time <- factor(time, order=FALSE)
fit6 <- aov(y ~ a*b*time + Error(s/time))
summary(fit6)
detach(Example8_13)
# 重复测量方差分析案例3
Example8_13  <- read.table ("example8_13.csv", header=TRUE, sep=",")
attach(Example8_13)
a <- factor(a, order=FALSE)
b <- factor(b, order=FALSE)
s <- factor(s, order=FALSE)
time <- factor(time, order=FALSE)
fit6 <- aov(y ~ a*b*time + Error(s/time))
summary(fit6)
detach(Example8_13)
example14_11 <- read.table ("example14_11.csv", header=TRUE, sep=",")
attach(example14_11)
kruskal.test(rate ~ group)
library(nparcomp)
nparcomp(rate ~ group, data=example14_11, alternative = "two.sided")
detach(example14_11)
example14_18 <- read.table ("example14_18.csv", header=TRUE, sep=",")
attach(example14_18)
friedman.test (rate ~ treat|block)
library(PMCMR)
posthoc.friedman.nemenyi.test(rate,treat,block)
example14_18 <- read.table ("example14_18.csv", header=TRUE, sep=",")
attach(example14_18)
friedman.test (rate ~ treat|block)
library(PMCMRplus)
PMCMRplus::frdAllPairsNemenyiTest(rate,treat,block)
detach(example14_18)
