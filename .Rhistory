#font_add("heiti", "simhei.ttf")
## Constantia font with regular and italic font faces
#font_add("constan", regular = "constan.ttf", italic = "constani.ttf")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "WeibeiSC-Bold", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "ArialMT", fontface = "italic", size = 12)
## PNG device
ggsave("load_fonts.png", width = 7, height = 4, dpi = 96)
## turn off if no longer needed
showtext_auto(FALSE)
library(showtext)
## HeiTi font for Chinese characters
#font_add("heiti", "simhei.ttf")
## Constantia font with regular and italic font faces
#font_add("constan", regular = "constan.ttf", italic = "constani.ttf")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "手札体-简", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "ArialMT", fontface = "italic", size = 12)
## PNG device
ggsave("load_fonts.png", width = 7, height = 4, dpi = 96)
## turn off if no longer needed
showtext_auto(FALSE)
library(showtext)
## HeiTi font for Chinese characters
font_add("HannotateSC-W5")
library(showtext)
## HeiTi font for Chinese characters
#font_add("HannotateSC-W5")
## Constantia font with regular and italic font faces
#font_add("constan", regular = "constan.ttf", italic = "constani.ttf")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "HannotateSC-W5", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "ArialMT", fontface = "italic", size = 12)
## PNG device
ggsave("load_fonts.png", width = 7, height = 4, dpi = 96)
## turn off if no longer needed
showtext_auto(FALSE)
library(showtext)
font_add_google("ZCOOL KuaiLe", "KuaiLe")
font_add_google("Chivo Mono", "Mono")
library(showtext)
font_add_google("ZCOOL KuaiLe")
font_add_google("Chivo Mono")
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Gochi Hand")
font_add_google("Schoolbell")
## Automatically use showtext to render text
showtext_auto()
set.seed(123)
hist(rnorm(1000), breaks = 30, col = "steelblue", border = "white",
main = "", xlab = "", ylab = "")
title("Histogram of Normal Random Numbers", family = "bell", cex.main = 2)
title(ylab = "Frequency", family = "Gochi Hand", cex.lab = 2)
text(2, 70, "N = 1000", family = "Schoolbell", cex = 2.5)
library(showtext)
font_add_google("ZCOOL KuaiLe")
font_add_google("Schoolbell")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "ZCOOL KuaiLe", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "Schoolbell", fontface = "italic", size = 12)
## PNG device
ggsave("load_fonts.png", width = 7, height = 4, dpi = 96)
## turn off if no longer needed
showtext_auto(FALSE)
library(showtext)
font_add_google("ZCOOL KuaiLe")
font_add_google("Schoolbell")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "ZCOOL KuaiLe", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "Schoolbell", fontface = "italic", size = 12)
## PNG device
ggsave("load_fonts.png", width = 7, height = 4, dpi = 300)
## turn off if no longer needed
showtext_auto(FALSE)
library(showtext)
font_add_google("ZCOOL KuaiLe")
font_add_google("Schoolbell")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "ZCOOL KuaiLe", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "Schoolbell", fontface = "italic", size = 12)
## PNG device
ggsave("load_fonts.pdf", width = 7, height = 4, dpi = 300)
## turn off if no longer needed
showtext_auto(FALSE)
library(showtext)
font_add_google("ZCOOL KuaiLe")
font_add_google("Schoolbell")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "ZCOOL KuaiLe", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "Schoolbell", fontface = "italic", size = 12)
## PNG device
#ggsave("load_fonts.pdf", width = 7, height = 4, dpi = 300)
## turn off if no longer needed
showtext_auto(FALSE)
library(showtext)
font_add_google("ZCOOL KuaiLe")
font_add_google("Schoolbell")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "ZCOOL KuaiLe", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "Schoolbell", fontface = "italic", size = 12)
## PNG device
ggsave("load_fonts.pdf", width = 7, height = 4, dpi = 300)
## turn off if no longer needed
#showtext_auto(FALSE)
library(showtext)
font_add_google("ZCOOL KuaiLe")
font_add_google("Schoolbell")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "ZCOOL KuaiLe", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "Schoolbell", fontface = "italic", size = 12)
print(p)
## PNG device
ggsave("load_fonts.pdf", width = 7, height = 4, dpi = 300)
## turn off if no longer needed
#showtext_auto(FALSE)
font_families()
font_import()
font_import(paths = "/System/Library/Fonts")
library(showtext)
## 宋体-简 for Chinese characters
font_add("Songti", "/System/Library/Fonts/Supplemental/Songti.ttc")
## Arial with regular and italic font faces
font_add("Arial", "/System/Library/Fonts/Supplemental/Arial.ttf")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "Songti", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "Arial", fontface = "italic", size = 12)
print(p)
## PNG device
ggsave("load_fonts.pdf", width = 7, height = 4, dpi = 300)
## turn off if no longer needed
#showtext_auto(FALSE)
library(showtext)
## 加载macOS自带字体，打开启动台--其他--字体册app，找到目标字体，查看字体所在路径
## 中文：宋体-简
font_add("Songti", "/System/Library/Fonts/Supplemental/Songti.ttc")
## 英文：Arial
font_add("Arial", "/System/Library/Fonts/Supplemental/Arial.ttf")
font_add("Times New Roman", "/System/Library/Fonts/Supplemental/Times New Roman.ttff")
library(showtext)
## 加载macOS自带字体，打开启动台--其他--字体册app，找到目标字体，查看字体所在路径
## 中文：宋体-简
font_add("Songti", "/System/Library/Fonts/Supplemental/Songti.ttc")
## 英文：Arial
font_add("Arial", "/System/Library/Fonts/Supplemental/Arial.ttf")
font_add("Times New Roman", "/System/Library/Fonts/Supplemental/Times New Roman.ttf")
## 使用showtext自动匹配文本格式
showtext_auto()
set.seed(123)
hist(rnorm(1000), breaks = 30, col = "steelblue", border = "white",
main = "", xlab = "", ylab = "")
title("随机数正态分布图", family = "Songti", cex.main = 2)
title(ylab = "Frequency", family = "Arial", cex.lab = 2)
text(2, 70, "N = 1000", family = "Times New Roman", cex = 2.5)
library(showtext)
## 英文斜体：Arial Italic
font_add("Arial Italic", "/System/Library/Fonts/Supplemental/Arial Italic.ttf")
set.seed(123)
hist(rnorm(1000), breaks = 30, col = "steelblue", border = "white",
main = "Histogram of Normal Random Numbers", xlab = "", ylab = "Frequency")
showtext_begin()
text(2, 70, "N = 1000", family = "Arial Italic", cex = 2.5)
showtext_end()
library(showtext)
## 宋体-简 for Chinese characters
font_add("Songti", "/System/Library/Fonts/Supplemental/Songti.ttc")
## Arial with regular and italic font faces
font_add("Arial", "/System/Library/Fonts/Supplemental/Arial.ttf")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "Songti", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "Arial", fontface = "italic", size = 12)
print(p)
## PNG device
ggsave("load_fonts.pdf", width = 7, height = 4, dpi = 300)
## turn off if no longer needed
#showtext_auto(FALSE)
library(showtext)
## 宋体-简 for Chinese characters
font_add("Songti", "/System/Library/Fonts/Supplemental/Songti.ttc")
## Arial with regular and italic font faces
font_add("Arial", "/System/Library/Fonts/Supplemental/Arial.ttf")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "Songti", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "Arial", fontface = "italic", size = 12)
print(p)
## PNG device
ggsave("load_fonts.pdf", width = 7, height = 4, dpi = 300)
## turn off if no longer needed
showtext_auto(FALSE)
library(showtext)
## 宋体-简 for Chinese characters
font_add("Songti", "/System/Library/Fonts/Supplemental/Songti.ttc")
## Arial with regular and italic font faces
font_add("Arial", "/System/Library/Fonts/Supplemental/Arial.ttf")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "Songti", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "Arial", fontface = "italic", size = 12)
print(p)
## PNG device
ggsave("Hello_world-14.2.2.pdf", width = 7, height = 4, dpi = 300)
## turn off if no longer needed
showtext_auto(FALSE)
library(showtext)
## 加载macOS自带字体，打开启动台--其他--字体册app，找到目标字体，查看字体所在路径
## 中文：宋体-简
font_add("Songti", "/System/Library/Fonts/Supplemental/Songti.ttc")
## 英文：Arial
font_add("Arial", "/System/Library/Fonts/Supplemental/Arial.ttf")
font_add("Times New Roman", "/System/Library/Fonts/Supplemental/Times New Roman.ttf")
## 如需全局使用showtext则可使用该函数
showtext_auto()
set.seed(123)
pdf("随机数正态分布图-14.2.1.pdf", width=6, height=6)
hist(rnorm(1000), breaks = 30, col = "steelblue", border = "white",
main = "", xlab = "", ylab = "")
title("随机数正态分布图", family = "Songti", cex.main = 2)
title(ylab = "Frequency", family = "Arial", cex.lab = 2)
text(2, 70, "N = 1000", family = "Times New Roman", cex = 2.5)
dev.off()
library(showtext)
## 英文斜体：Arial Italic
font_add("Arial Italic", "/System/Library/Fonts/Supplemental/Arial Italic.ttf")
set.seed(123)
pdf("随机数正态分布图-14.2.1.pdf", width=6, height=6) # 导出为PDF
hist(rnorm(1000), breaks = 30, col = "steelblue", border = "white",
main = "Histogram of Normal Random Numbers", xlab = "", ylab = "Frequency")
showtext_begin()
text(2, 70, "N = 1000", family = "Arial Italic", cex = 2.5)
showtext_end()
dev.off()
library(showtext)
## 加载macOS自带字体，打开启动台--其他--字体册app，找到目标字体，查看字体所在路径
## 中文：宋体-简
font_add("Songti", "/System/Library/Fonts/Supplemental/Songti.ttc")
## 英文：Arial
font_add("Arial", "/System/Library/Fonts/Supplemental/Arial.ttf")
font_add("Times New Roman", "/System/Library/Fonts/Supplemental/Times New Roman.ttf")
## 如需全局使用showtext则可使用该函数
showtext_auto()
set.seed(123)
hist(rnorm(1000), breaks = 30, col = "steelblue", border = "white",
main = "", xlab = "", ylab = "")
title("随机数正态分布图", family = "Songti", cex.main = 2)
title(ylab = "Frequency", family = "Arial", cex.lab = 2)
text(2, 70, "N = 1000", family = "Times New Roman", cex = 2.5)
library(showtext)
## 英文斜体：Arial Italic
font_add("Arial Italic", "/System/Library/Fonts/Supplemental/Arial Italic.ttf")
set.seed(123)
pdf("Histogram of Normal Random Numbers-14.2.1.pdf", width=6, height=6) # 导出为PDF
hist(rnorm(1000), breaks = 30, col = "steelblue", border = "white",
main = "Histogram of Normal Random Numbers", xlab = "", ylab = "Frequency")
showtext_begin()
text(2, 70, "N = 1000", family = "Arial Italic", cex = 2.5)
showtext_end()
dev.off()
library(showtext)
## 宋体-简 for Chinese characters
font_add("Songti", "/System/Library/Fonts/Supplemental/Songti.ttc")
## Arial with regular and italic font faces
font_add("Arial", "/System/Library/Fonts/Supplemental/Arial.ttf")
showtext_auto()
library(ggplot2)
p = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
theme(axis.title = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank()) +
annotate("text", 1, 1.1, family = "Songti", size = 15,
label = "\u4F60\u597D\uFF0C\u4E16\u754C") +
annotate("text", 1, 0.9, label = 'Chinese for "Hello, world!"',
family = "Arial", fontface = "italic", size = 12)
print(p)
## PNG device
ggsave("Hello_world-14.2.2.pdf", width = 7, height = 4, dpi = 300)
## turn off if no longer needed
showtext_auto(FALSE)
---
output:
html_document:
fig_retina: 1
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
library(gcookbook) # 为了使用数据集
heightweight
library(gcookbook) # 为了使用数据集
head(heightweight)
str(heightweight)
# 从两个简单的向量开始
g <- c("A","B", "C")
x <- 1:3
dat <- data.frame(g, x)
dat
l1 <- list(group = g, value = x) # 由向量组成的列表
dat <- as.data.frame(l1)
# 从两个简单的向量开始
g <- c("A","B", "C")
x <- 1:3
dat1 <- data.frame(g, x)
dat1
l1 <- list(group = g, value = x) # 由向量组成的列表
dat2 <- as.data.frame(l1)
dat2
str(ToothGrowth)
tg <- ToothGrowth
tg$supp <- as.character(tg$supp)
str(tg)
# 直接输出列
# 原始数据框(因子)
ToothGrowth$supp
# 新数据框(字符串)
tg$supp
library(gcookbook) # 为了使用数据集
names (anthoming)  # 输出列名
library(gcookbook) # 为了使用数据集
names(anthoming)  # 输出列名
names(anthoming)[names(anthoming) == "ctrl"] <- c("Control")
names(anthoming)[names(anthoming) == "expt"] <- c("Experimental")
names(anthoming)
names(anthoming)[1] <- "Angle"
names(anthoming)
library(gcookbook) # 为了使用数据集
anthoming
library(gcookbook) # 为了使用数据集
anthoming
anthoming[c(1,3,2)] # 列表风格的索引
# 逗号之前的空白表示输出所有行
anthoming[, c(1,3,2)]# 矩阵风格的索引
library(gcookbook) # 为了使用数据集
anthoming
anthoming[c(1,3,2)] # 列表风格的索引
# 逗号之前的空白表示输出所有行
anthoming[ , c(1,3,2)]# 矩阵风格的索引
anthoming[3] # 列表风格的索引
anthoming[ , 3]# 矩阵风格的索引
anthoming[, 3, drop=FALSE] #矩阵风格的索引，并添加参数drop=FALSE
library(gcookbook) # 为了使用数据集
head(climate)
subset(climate, Source == "Berkeley", select = c(Year, Anomaly10y))
s1 <- subset(climate, Source == "Berkeley", select = c(Year, Anomaly10y))
head(s1)
s2 <- subset(climate, Source == "Berkeley" & Year >= 1900 & Year <= 2000,
select = c(Year, Anomaly10y))
s2
s2 <- subset(climate, Source == "Berkeley" & Year >= 1900 & Year <= 2000,
select = c(Year, Anomaly10y))
head(s2)
c1 <- climate[climate$Source="Berkeley" & climate$Year >= 1900 & climate$Year <- 2000,
c1 <- climate[climate$Source="Berkeley" & climate$Year >= 1900 & climate$Year <- 2000,
c1 <- climate[climate$Source="Berkeley" & climate$Year >= 1900 & climate$Year <- 2000,
c1 <- climate[climate$Source=="Berkeley" & climate$Year >= 1900 & climate$Year <- 2000,
c("Year", "Anomaly10y",drop=FALSE)]
c1 <- climate[climate$Source=="Berkeley" & climate$Year >= 1900 & climate$Year <= 2000,
c("Year", "Anomaly10y",drop=FALSE)]
s2 <- subset(climate, Source == "Berkeley" & Year >= 1900 & Year <= 2000,
select = c(Year, Anomaly10y))
head(s2)
c1 <- climate[climate$Source=="Berkeley" & climate$Year >= 1900 & climate$Year <= 2000,
c("Year", "Anomaly10y",drop=FALSE)]
c1 <- climate[climate$Source=="Berkeley" & climate$Year >= 1900 & climate$Year <= 2000,
c("Year", "Anomaly10y"),drop=FALSE]
c1
c1 <- climate[climate$Source=="Berkeley" & climate$Year >= 1900 & climate$Year <= 2000,
c("Year", "Anomaly10y"),drop=FALSE]
head(c1)
c2 <- climate[1:100, c(2,5)]
head(c2)
# 默认的因子水平的顺序是按字母排的
sizes <- factor(c("small", "large", "large", "small", "medium"))
sizes
# 默认的因子水平的顺序是按字母排的
s3 <- factor(c("small", "large", "large", "small", "medium"))
s3
# 改变因子水平的顺序
s4 <- factor(sizes, levels = c("small", "medium", "large"))
s4
factor(sizes, levels = rev(levels(sizes)))
# 复制一份数据，因为我们要修改它
iss <- InsectSprays
iss$spray
# 复制一份数据，因为我们要修改它
iss <- InsectSprays
iss$spray
iss$spray <- reorder(iss$spray, iss$count, FUN=mean)
iss$spray
reorder(iss$spray)
plot(reorder(iss$spray))
plot(iss$spray))
plot(iss$spray)
boxplot(spray~count, data=iss$spray)
boxplot(spray~count, data=iss)
boxplot(count~spray, data=iss)
boxplot(count~spray, data=InsectSprays)
boxplot(count~spray, data=iss)
boxplot(count~spray, data=InsectSprays)
boxplot(count~spray, data=iss)
# 复制一份数据，因为我们要修改它
iss <- InsectSprays
iss1$spray
# 复制一份数据，因为我们要修改它
iss1 <- InsectSprays
iss1$spray
iss2 <- reorder(iss$spray, iss$count, FUN=mean)
iss2
boxplot(count~spray, data=iss1)
boxplot(count~spray, data=iss2)
# 复制一份数据，因为我们要修改它
iss1 <- InsectSprays
iss1$spray
iss2 <- reorder(iss1$spray, iss1$count, FUN=mean)
iss2
boxplot(iss1$count~iss1$spray, data=iss2)
boxplot(count~spray, data=iss1)
boxplot(count~spray, data=InsectSprays)
# 复制一份数据，因为我们要修改它
iss1 <- InsectSprays
iss1$spray
iss2 <- reorder(iss1$spray, iss1$count, FUN=mean)
iss2
boxplot(count~spray, data=iss1)
boxplot(iss1$count~iss1$spray, data=iss2)
boxplot(iss1$count~iss1$spray, data=iss1)
boxplot(iss1$count~iss1$spray, data=iss2)
boxplot(count~spray, data=iss)
boxplot(iss1$count~iss1$spray, data=iss2)
# 默认的因子水平的顺序是按字母排的
s3 <- factor(c("small", "large", "large", "small", "medium"))
s3
# 改变因子水平的顺序
s4 <- factor(s3, levels = c("small", "medium", "large"))
s4
factor(sizes, levels = rev(levels(s3)))
s5 <- factor(s3, levels = rev(levels(s3)))
s5
boxplot(count~spray, data=iss2)
iss2
str(iss2)
