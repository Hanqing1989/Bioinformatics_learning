xyplot(mpg~disp|transmission,
scales=list(cex=.8, col="red"),
panel=panel.smoother,
xlab="Displacement", ylab="Miles per Gallon",
main="MPG vs Displacement by Transmission Type",
sub = "Dotted lines are Group Means", aspect=1)
library(lattice)
mtcars$transmission <- factor(mtcars$am, levels=c(0, 1),
labels=c("Automatic", "Manual"))
densityplot(~mpg, data=mtcars,
group=transmission,
main="MPG Distribution by Transmission Type",
xlab="Miles per Gallon",
auto.key=TRUE)
auto.key=list(space="right", columns=1, title="Transmission")
library(lattice)
mtcars$transmission <- factor(mtcars$am, levels=c(0, 1),
labels=c("Automatic", "Manual"))
densityplot(~mpg, data=mtcars,
group=transmission,
main="MPG Distribution by Transmission Type",
xlab="Miles per Gallon",
auto.key=list(space="right", columns=1, title="Transmission"))
library(lattice)
mtcars$transmission <- factor(mtcars$am, levels=c(0, 1),                               labels=c("Automatic", "Manual"))
# 指定的颜色、线和点
colors <- c("red", "blue")
lines  <- c(1,2)
points <- c(16,17)
# 自定义图例
key.trans <- list(title="Transmission",
space="bottom", columns=2,
text=list(levels(mtcars$transmission)),
points=list(pch=points, col=colors),
lines=list(col=colors, lty=lines),
cex.title=1, cex=.9)
# 密度图
densityplot(~mpg, data=mtcars,
group=transmission,
main="MPG Distribution by Transmission Type",
xlab="Miles per Gallon",
pch=points, lty=lines, col=colors,
lwd=2, jitter=.005,
key=key.trans)
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
library(lattice)
mtcars$transmission <- factor(mtcars$am, levels=c(0, 1),                               labels=c("Automatic", "Manual"))
# 指定的颜色、线和点
colors <- c("red", "blue")
lines  <- c(1,2)
points <- c(16,17)
# 自定义图例
key.trans <- list(title="Transmission",
space="bottom", columns=2,
text=list(levels(mtcars$transmission)),
points=list(pch=points, col=colors),
lines=list(col=colors, lty=lines),
cex.title=1, cex=.9)
# 密度图
densityplot(~mpg, data=mtcars,
group=transmission,
main="MPG Distribution by Transmission Type",
xlab="Miles per Gallon",
pch=points, lty=lines, col=colors,
lwd=2, jitter=.005,
key=key.trans)
library(lattice)
colors <- "darkgreen"
symbols <- c(1:12)
linetype <- c(1:3)
key.species <- list(title="Plant",
space="right",
text=list(levels(CO2$Plant)),
points=list(pch=symbols, col=colors))
xyplot(uptake~conc|Type*Treatment, data=CO2,
group=Plant,
type="o",
pch=symbols, col=colors, lty=linetype,
main="Carbon Dioxide Uptake\nin Grass Plants",
ylab=expression(paste("Uptake ",
bgroup("(", italic(frac("umol","m"^2)), ")"))),
xlab=expression(paste("Concentration ",
bgroup("(", italic(frac(mL,L)), ")"))),
sub = "Grass Species: Echinochloa crus-galli",
key=key.species)
show.settings()
mysettings <- trellis.par.get()
mysettings <- trellis.par.get()
names(mysettings)
mysettings$superpose.symbol
mysettings$superpose.symbol$pch <- c(1:10)
trellis.par.set(mysettings)
mysettings$superpose.symbol$pch <- c(1:10)
trellis.par.set(mysettings)
show.settings()
library(lattice)
histogram(~height | voice.part, data = singer,
strip = strip.custom(bg="lightgrey",
par.strip.text=list(col="black", cex=.8, font=3)),
main="Distribution of Heights by Voice Pitch",
xlab="Height (inches)")
library(lattice)
histogram(~height | voice.part, data = singer,
strip = strip.custom(bg="lightgrey",
par.strip.text=list(col="red", cex=.8, font=3)),
main="Distribution of Heights by Voice Pitch",
xlab="Height (inches)")
mysettings <- trellis.par.get()
mysettings$strip.background$col <- c("lightgrey", "lightgreen")
trellis.par.set(mysettings)
mysettings <- trellis.par.get()
mysettings$strip.background$col <- c("lightgrey", "lightgreen")
trellis.par.set(mysettings)
show.settings()
library(lattice)
graph1 <- histogram(~height | voice.part, data = singer,
main = "Heights of Choral Singers by Voice Part" )
graph2 <- bwplot(height~voice.part, data = singer)
plot(graph1, split = c(1, 1, 1, 2))
plot(graph2, split = c(1, 2, 1, 2), newpage = FALSE)
library(lattice)
graph1 <- histogram(~height | voice.part, data = singer,
main = "Heights of Choral Singers by Voice Part")
graph2 <- bwplot(height~voice.part, data = singer)
plot(graph1, position=c(0, .3, 1, 1))
plot(graph2, position=c(0, 0, 1, .3), newpage=FALSE)
levels(singer$voice.part)
histogram(~height | voice.part, data = singer,
index.cond=list(c(2, 4, 6, 8, 1, 3, 5, 7)))
library(lattice)
colors <- "darkgreen"
symbols <- c(1:12)
linetype <- c(1:3)
key.species <- list(title="Plant",
space="right",
text=list(levels(CO2$Plant)),
points=list(pch=symbols, col=colors))
xyplot(uptake~conc|Type*Treatment, data=CO2,
group=Plant,
type="o",
pch=symbols, col=colors, lty=linetype,
main="Carbon Dioxide Uptake\nin Grass Plants",
ylab=expression(paste("Uptake ",
bgroup("(", italic(frac("umol","m"^2)), ")"))),
xlab=expression(paste("Concentration ",
bgroup("(", italic(frac(mL,L)), ")"))),
sub = "Grass Species: Echinochloa crus-galli",
key=key.species,
index.cond=list(c(1,2),c(2,1)))
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
Example8_12  <- read.table ("example8_12.csv", header=TRUE, sep=",")
attach(Example8_12)
type  <-factor(type, order=FALSE)
time  <-factor(time, order=FALSE)
subject  <-factor(subject, order=FALSE)
fit <- aov(rate ~type*time +Error(subject/time))
summary(fit)
detach(Example8_12)
Example8_13  <- read.table ("example8_13.csv", header=TRUE, sep=",")
attach(Example8_13)
a  <-factor(a, order=FALSE)
b  <-factor(b, order=FALSE)
s  <-factor(s, order=FALSE)
time  <-factor(time, order=FALSE)
fit <- aov(y ~a*b*time +Error(s/time))
Example8_13  <- read.table ("example8_13.csv", header=TRUE, sep=",")
attach(Example8_13)
a  <-factor(a, order=FALSE)
b  <-factor(b, order=FALSE)
s  <-factor(s, order=FALSE)
time  <-factor(time, order=FALSE)
fit <- aov(y ~a*b*time +Error(s/time))
??read.table
?read.table
View(Example8_12)
View(Example8_13)
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
Example8_13  <- read.table ("example8_13.csv", header=TRUE, sep=",")
attach(Example8_13)
a  <-factor(a, order=FALSE)
b  <-factor(b, order=FALSE)
s  <-factor(s, order=FALSE)
time  <-factor(time, order=FALSE)
fit <- aov(y ~a*b*time +Error(s/time))
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
Example8_13  <- read.table ("example8_13.csv", header=TRUE, sep=",")
attach(Example8_13)
a  <-factor(a, order=FALSE)
b  <-factor(b, order=FALSE)
s  <-factor(s, order=FALSE)
time  <-factor(time, order=FALSE)
fit <- aov(y ~a*b*time +Error(s/time))
summary(fit)
detach(Example8_13)
Example8_13  <- read.table ("example8_13.csv", header=TRUE, sep=",")
attach(Example8_13)
a  <-factor(a, order=FALSE)
b  <-factor(b, order=FALSE)
s  <-factor(s, order=FALSE)
time  <-factor(time, order=FALSE)
fit <- aov(y ~a*b*time +Error(s/time))
summary(fit)
detach(Example8_13)
example14_11  <- read.table ("example14_11.csv", header=TRUE, sep=",")
attach(example14_11)
kruskal.test(rate ~ group)
library(nparcomp)
nparcomp(rate ~ group, data=example14_11, alternative = "two.sided")
detach(example14_11)
example14_18  <- read.table ("example14_18.csv", header=TRUE, sep=",")
attach(example14_18)
friedman.test (rate~ treat|block)
library(PMCMR)
posthoc.friedman.nemenyi.test(rate,treat,block)
states <- data.frame(state.region, state.x77)
kruskal.test(Illiteracy ~ state.region, data=states)
example14_11  <- read.table ("example14_11.csv", header=TRUE, sep=",")
attach(example14_11)
kruskal.test(rate ~ group)
library(nparcomp)
nparcomp(rate ~ group, data=example14_11, alternative = "two.sided")
detach(example14_11)
example14_18  <- read.table ("example14_18.csv", header=TRUE, sep=",")
attach(example14_18)
friedman.test (rate~ treat|block)
library(PMCMR)
posthoc.friedman.nemenyi.test(rate,treat,block)
source("/Users/liang.hanqing/Documents/Git-local/Github_Bioinformatics_Learning/R/Phase1_R_Basic_Learning/wmc.txt")
states <- data.frame(state.region, state.x77)
options(digits = 3)
wmc(Illiteracy ~ state.region, data=states, method="holm")
View(states)
View(states)
View(states)
View(example14_11)
example14_11  <- read.table ("example14_11.csv", header=TRUE, sep=",")
attach(example14_11)
group <-factor(group)
kruskal.test(rate ~ group)
library(nparcomp)
nparcomp(rate ~ group, data=example14_11, alternative = "two.sided")
detach(example14_11)
source("/Users/liang.hanqing/Documents/Git-local/Github_Bioinformatics_Learning/R/Phase1_R_Basic_Learning/wmc.txt")
states <- data.frame(state.region, state.x77)
options(digits = 3)
wmc(Illiteracy ~ state.region, data=states, method="holm")
detach(state)
detach(state)
example14_18  <- read.table ("example14_18.csv", header=TRUE, sep=",")
attach(example14_18)
detach(state)
example14_11  <- read.table ("example14_11.csv", header=TRUE, sep=",")
attach(example14_11)
group <-factor(group)
kruskal.test(rate ~ group)
library(nparcomp) # 非参数多重比较包
nparcomp(rate ~ group, data=example14_11, alternative = "two.sided")
detach(example14_11)
example14_18  <- read.table ("example14_18.csv", header=TRUE, sep=",")
attach(example14_18)
detach(state)
example14_18  <- read.table ("example14_18.csv", header=TRUE, sep=",")
attach(example14_18)
detach(states)
example14_18  <- read.table ("example14_18.csv", header=TRUE, sep=",")
attach(example14_18)
friedman.test (rate~ treat|block)
library(PMCMR)
posthoc.friedman.nemenyi.test(rate,treat,block)
example14_18  <- read.table ("example14_18.csv", header=TRUE, sep=",")
attach(example14_18)
friedman.test (rate~ treat|block)
library(PMCMR)
options(digits = 6)
posthoc.friedman.nemenyi.test(rate,treat,block)
example14_18  <- read.table ("example14_18.csv", header=TRUE, sep=",")
attach(example14_18)
friedman.test (rate~ treat|block)
library(PMCMR)
options(digits = 8)
posthoc.friedman.nemenyi.test(rate,treat,block)
install.packages('PMCMR')
install.packages("PMCMR")
example14_18  <- read.table ("example14_18.csv", header=TRUE, sep=",")
attach(example14_18)
options(digits = 8)
friedman.test (rate~ treat|block)
library(PMCMR)
posthoc.friedman.nemenyi.test(rate,treat,block)
install.packages('PMCMRplus')
example14_18  <- read.table ("example14_18.csv", header=TRUE, sep=",")
attach(example14_18)
options(digits = 8)
friedman.test (rate~ treat|block)
library(PMCMRplus)
PMCMRplus::frdAllPairsNemenyiTest(rate,treat,block)
detach(example14_18)
example14_18  <- read.table ("example14_18.csv", header=TRUE, sep=",")
attach(example14_18)
options(digits = 6)
friedman.test (rate~ treat|block)
library(PMCMRplus)
PMCMRplus::frdAllPairsNemenyiTest(rate,treat,block)
detach(example14_18)
# example18_2
# install.packages("Hmisc")
# library(Hmisc)
example18_2  <- read.table ("example18_2.csv", header=TRUE, sep=",")
example18_2
str(example18_2)
plot(example18_2)
kc1 <- kmeans(example18_2,centers=1, nstart=1, trace=TRUE)
kc1
kc2 <- kmeans(example18_2,centers=2, nstart=1, trace=TRUE)
kc2
kc3 <- kmeans(example18_2,centers=3, nstart=1, trace=TRUE)
example18_2  <- read.table ("/Users/liang.hanqing/Desktop/编程学习/从零开始学 R 语言，带你玩转医学统计学/ch10/example18_2.csv", header=TRUE, sep=",")
example18_2
str(example18_2)
plot(example18_2)
kc1 <- kmeans(example18_2,centers=1, nstart=1, trace=TRUE)
kc1
kc2 <- kmeans(example18_2,centers=2, nstart=1, trace=TRUE)
kc2
kc3 <- kmeans(example18_2,centers=3, nstart=1, trace=TRUE)
kc3
insta11.packages ("ggplot2")
install.packages('gcookbook')
install.packages('ggplot2')
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
library(gcookbook)
simpledat
barplot(simpledat, beside-TRUE)
barplot(simpledat, beside=TRUE)
t(simpledat)
barplot(simpledat, beside=TRUE)
plot (simpledat[1,], type="l")
lines(simpledat[2,], type="1", col="blue")
plot (simpledat[1,], type="l")
lines(simpledat[2,], type="l", col="blue")
barplot(t_simpledat, beside=TRUE)
t_simpledat <- t(simpledat)
barplot(t_simpledat, beside=TRUE)
simpledat_long
library(ggplot2)
ggplot(simpledat_long, aes (x=Aval, y=value, fill=Bval)) +
geom_bar (stat="identity", position="dodge")
library(ggplot2)
ggplot(simpledat_long, aes (x=Bval, y=value, fill=Aval)) +
geom_bar (stat="identity", position="dodge")
ggplot (simpledat_long, aes (x=Aval, y=value, colour=Bval, group=Bval)) +
geom_line()
dat <- data.frame (xval=1:4, yval=c(3,5,6,9), group=c("A","B","A","B”))
dat
dat <- data.frame(xval=1:4, yval=c(3,5,6,9), group=c("A","B","A","B”))
dat
dat <- data.frame(xval=1:4, yval=c(3,5,6,9), group=c("A","B","A","B”))
dat
dat <- data.frame(xval=1:4, yval=c(3,5,6,9), group=c("A","B","A","B"))
dat
ggplot (dat, aes (x=xval, y=yval)
ggplot(dat, aes (x=xval, y=yval))
ggplot (dat, aes (x=xval, y=yval)) + geom_point ()
p <- ggplot(dat,aes (x=xval,y=yval))
p + geom_point()
p + geom_point(aes(colours=group))
p + geom_point(colours='blue')
p + geom_point(aes(colour=group))
p + geom_point(colour='blue')
p + geom_point() + scale_x_continuous(limits = c(0,8))
p + geom_point() +
scale_colour_manual(values=c("orange","forestgreen"))
p + geom_point() +
scale_colour_manual(values=c("orange","forestgreen"))
p + geom_point() +
scale_colour_manual(values=c("orange","forestgreen"))
p + geom_point() +
scale_colour_manual(values=c("red","forestgreen"))
p + geom_point() + scale_colour_manual(values=c("orange","forestgreen"))
p + geom_point() + scale_colour_manual(values = c('orange','forestgreen'))
p + geom_point() + scale_colour_manual(values = c('red','blue'))
?scale_colour_manual
p <- ggplot(dat,aes (x=xval,y=yval))
p + geom_point() + scale_colour_manual(values = c('red','blue'))
p <- ggplot(dat,aes(x=xval,y=yval)) + geom_point(aes(colour = group))
p + geom_point() + scale_colour_manual(values = c('red','blue'))
p <- ggplot(dat,aes(x=xval,y=yval)) + geom_point(aes(colour = group))
p + scale_colour_manual(values = c('red','blue'))
p + scale_colour_manual(values = c('red','blue'))
p + scale_colour_manual(values = c('red','blue'))
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
plot(mtcars$wt,mtcars&mpg)
plot(mtcars$wt,mtcars$mpg)
library(ggplot2)
qplot(mtcars$wt,mtcars$mpg)
qplot(wt,mpg,data=mtcars)
ggplot(mtcars,aes(x=wt,y=mpg)) + geom_point()
plot(pressure$temperature,pressure$pressure,type = 'l')
plot(pressure$temperature,pressure$pressure,type = 'l')
points(pressure$temperature,pressure$pressure)
plot(pressure$temperature,pressure$pressure,type = 'l')
points(pressure$temperature,pressure$pressure)
line(pressure$temperature,pressure$pressure/2,col='red')
plot(pressure$temperature,pressure$pressure,type = 'l')
points(pressure$temperature,pressure$pressure)
line(pressure$temperature,pressure$pressure/2,col = 'red')
plot(pressure$temperature,pressure$pressure,type = 'l')
points(pressure$temperature,pressure$pressure)
line(pressure$temperature,pressure$pressure/2,col = "red")
plot(pressure$temperature,pressure$pressure,type = 'l')
points(pressure$temperature,pressure$pressure)
lines(pressure$temperature,pressure$pressure/2,col = "red")
points(pressure$temperature,pressure$pressure/2,col = "red")
plot(pressure$temperature,pressure$pressure,type = 'l')
points(pressure$temperature,pressure$pressure)
lines(pressure$temperature,pressure$pressure/2,col = 'red')
points(pressure$temperature,pressure$pressure/2,col = 'red')
library(ggplot2)
qplot(pressure$temperature,pressure$pressure,geom = 'line')
qplot(temperature,pressure,data = pressure,geom = 'line')
# 等价于
# ggplot(pressure,aes(x=temperature,y=pressure)) + geom_line()
# 添加数据点
qplot(temperature,pressure,data = pressure,geom = c('line','point'))
# 等同于
# ggplot(pressure,aes(x=temperature,y=pressure)) + geom_line() + geom_point()
barplot(BOD$demand,names.arg=BOD$Time)
table(mtcars$cyl)
barplot(table(mtcars$cyl))
library(ggplot2)
qplot(BOD$Time,BOD$demand,geom = 'bar',stat = 'identity')
library(ggplot2)
qplot(BOD$Time,BOD$demand,geom = 'bar',stat = 'identity')
library(ggplot)
library(ggplot2)
qplot(BOD$Time,BOD$demand,geom = 'bar',stat = 'identity')
library(ggplot2)
qplot(BOD$Time,BOD$demand,geom = 'bar')
library(ggplot2)
qplot(BOD$Time,BOD$demand,geom = 'histogram')
library(ggplot2)
qplot(BOD$Time,BOD$demand,data=BOD,geom = 'histogram')
library(ggplot2)
qplot(BOD$demand,data=BOD,geom = 'histogram')
# 将x转化为因子变量，令系统将其视作离散值
qplot(factor(BOD$Time),BOD$demand,data=BOD,geom = 'histogram')
library(ggplot2)
qplot(BOD$Time,data=BOD,geom = 'histogram')
# 将x转化为因子变量，令系统将其视作离散值
qplot(factor(BOD$Time),data=BOD,geom = 'histogram')
library(ggplot2)
qplot(BOD$demand,data=BOD,geom = 'histogram')
# 将x转化为因子变量，令系统将其视作离散值
qplot(factor(BOD$demand),data=BOD,geom = 'histogram')
library(ggplot2)
qplot(data=BOD,geom = 'histogram')
?qplot
library(ggplot2)
qplot(BOD$Time,BOD$demand,data=BOD,geom = 'auto')
# 将x转化为因子变量，令系统将其视作离散值
qplot(factor(BOD$BOD$Time),BOD$demand,data=BOD,geom = 'auto')
library(ggplot2)
qplot(BOD$Time,BOD$demand,data=BOD,geom = 'auto')
# 将x转化为因子变量，令系统将其视作离散值
qplot(factor(BOD$Time),BOD$demand,data=BOD,geom = 'auto')
library(ggplot2)
qplot(BOD$Time,BOD$demand,data=BOD,geom = 'histogram')
library(ggplot2)
qplot(BOD$Time,BOD$demand,data=BOD,geom = 'bar')
library(ggplot2)
qplot(Time,demand,data=BOD,geom = 'bar')
library(ggplot2)
qplot(Time,demand,data=BOD,geom = 'histogram')
library(ggplot2)
ggplot(BOD,aes(x=Time,y=demand)) + geom_bar()
library(ggplot2)
ggplot(BOD,aes(x=Time,y=demand)) + geom_bar()
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
library(ggplot2)
ggplot(BOD,aes(x=Time,y=demand)) + geom_bar()
library(ggplot2)
df <- data.frame(BOD$Time,BOD$demand)
ggplot(df,aes(x=Time,y=demand)) + geom_bar()
library(ggplot2)
df <- data.frame(BOD$Time,BOD$demand)
ggplot(df,aes(BOD$Time,BOD$demand)) + geom_bar()
library(ggplot2)
df <- data.frame(BOD$Time,BOD$demand)
ggplot(df,aes(BOD$Time,BOD$demand))
# 将x转化为因子变量，令系统将其视作离散值
qplot(factor(BOD$Time),BOD$demand,data=BOD,geom = 'bar')
library(ggplot2)
df <- data.frame(BOD$Time,BOD$demand)
ggplot(df,aes(BOD$Time,BOD$demand))
# 将x转化为因子变量，令系统将其视作离散值
ggplot(df,aes(factor(BOD$Time),BOD$demand))
?qplot
library(ggplot2)
qplot(Time, demand, data = BOD, geom = "path")
library(ggplot2)
qplot(Time, demand, data = BOD, geom = "bar")
library(ggplot2)
qplot(Time, demand, data = BOD, geom = c("barplot", "jitter"))
library(ggplot2)
qplot(Time, demand, data = BOD, geom = c("bar", "jitter"))
library(ggplot2)
qplot(Time, demand, data = BOD, geom = "dotplot")
qplot(mpg, data = mtcars, geom = "dotplot")
library(ggplot2)
qplot(Time, data = BOD)
library(ggplot2)
barplot(BOD$Time,BOD$demand)
