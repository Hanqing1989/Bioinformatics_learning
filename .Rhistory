qqnorm(heightweight$ageYear)
qqline(heightweight$ageYear)
library(gcookbook) # 为了使用数据集
# heightIn的ecdf
ggplot(heightweight, aes(x=heightIn)) +
stat_ecdf()
# ageYear的ecdf
ggplot(heightweight, aes(x=ageYear)) +
stat_ecdf()
UCBAdmissions
UCBAdmissions
# 显示”平铺"后的列联表
ftable(UCBAdmissions)
dimnames(UCBAdmissions)
# 可能需要先安装包，install.packages ("vcd")
library (vcd)
#按照先Admit然后Gender再Dept的顺序分割数据
mosaic(~ Admit + Gender + Dept, data=UCBAdmissions)
mosaic( ~ Dept + Gender + Admit, data=UCBAdmissions,
highlighting="Admit", highlighting_fill=c("lightblue", "pink"), direction=c("v","h","v"))
# 可能需要先安装包，install.packages ("vcd")
library (vcd)
#按照先Admit然后Gender再Dept的顺序分割数据
mosaic(~ Admit + Gender + Dept, data=UCBAdmissions)
mosaic( ~ Dept + Gender + Admit, data=UCBAdmissions,
highlighting="Admit", highlighting_fill=c("lightblue", "pink"), direction=c("v","h","v"))
# 另一种可能的分割方向
mosaic(~ Dept + Gender + Admit, data=UCBAdmissions,
highlighting="Admit", highlighting_fill=c("lightblue", "pink"), direction=c("v", "v", "h"))
# 这个顺序比较男和女不是很容易
mosaic(~ Dept + Gender + Admit, data-UCBAdmissions,
highlighting="Admit", highlighting_fill=c("lightblue", "pink"), direction=c("v", "h", "h"))
# 另一种可能的分割方向
mosaic(~ Dept + Gender + Admit, data=UCBAdmissions,
highlighting="Admit", highlighting_fill=c("lightblue", "pink"), direction=c("v", "v", "h"))
# 这个顺序比较男和女不是很容易
mosaic(~ Dept + Gender + Admit, data=UCBAdmissions,
highlighting="Admit", highlighting_fill=c("lightblue", "pink"), direction=c("v", "h", "h"))
library(MASS) # 为了使用数据集
# 得到fold变量每个水平的频数
fold <- table(survey$Fold)
fold
library(MASS) # 为了使用数据集
# 得到fold变量每个水平的频数
fold <- table(survey$Fold)
fold
# 画饼图
pie(fold)
pie(c(99,18, 120), labels=c("L on R", "Neither", "R on I"))
install.packages('mapproj')
library(maps) # 为了使用地图数据
# 美国地图数据
states_map <- map_data("state") # 必须载入ggplot2以使用map_data()
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_polygon(fill="white", colour="black")
# geom_path(没有填充)和墨卡托投影
ggplot(states_map, aes(x=long, y=lat, group=group)) +
geom_path() + coord_map("mercator")
#世界地图数据
world_map <- map_data("world")
world_map
#世界地图数据
world_map <- map_data("world")
head(world_map)
sort(unique(world_map$region))
region6 <- sort(unique(world_map$region))
head(region6)
euro <- map_data("world", region=c("UK", "France", "Netherlands", "Belgium"))
# Map region to fill color
ggplot(euro, aes(x=long, y=lat, group=group, fill=region)) +
geom_polygon(colour="black") +
scale_fill_brewer(palette="Set2") +
scale_y_continuous(limits=c(40, 60))+
scale_x_continuous(limits=c(-25, 25))
# 从世界地图中得到新西兰地图数据
nzl <- map_data("world", region="New Zealand")
nzl <- subset(nzl, long > 0 & lat > -48) # 剔除岛屿
ggplot(nzl, aes(x=long, y=lat, group=group)) + geom_path()
# 从新西兰(nz)地图中得到新西兰地图数据
nz2 <- map_data("nz")
ggplot(nz2, aes(x=long, y=lat, group=group)) + geom_path()
# 把USArrests数据集转换成正确的格式
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
head(crimes)
# 把USArrests数据集转换成正确的格式
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
head(crimes)
library (maps) # 为了使用地图数据
states_map <- map_data("state")
# 合并数据集
crime_map <- merge(states_map, crimes, by.x="region", by.y="state")
#合并之后，顺序发生了变化，可能会导致多边形位置不对，所以要对数据排序
head(crime_map)
# 把USArrests数据集转换成正确的格式
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
head(crimes)
library (maps) # 为了使用地图数据
states_map <- map_data("state")
# 合并数据集
crime_map <- merge(states_map, crimes, by.x="region", by.y="state")
#合并之后，顺序发生了变化，可能会导致多边形位置不对，所以要对数据排序
head(crime_map)
library(plyr) # 为了使用arrange()函数
# 按照group.order排序
crime_map <- arrange(crime_map, group, order)
head(crime_map)
# 把USArrests数据集转换成正确的格式
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
head(crimes)
library (maps) # 为了使用地图数据
states_map <- map_data("state")
# 合并数据集
crime_map <- merge(states_map, crimes, by.x="region", by.y="state")
#合并之后，顺序发生了变化，可能会导致多边形位置不对，所以要对数据排序
head(crime_map)
library(plyr) # 为了使用arrange()函数
# 按照group.order排序
crime_map <- arrange(crime_map, group, order)
head(crime_map)
# 当数据的格式正确时，就可以画出图形，把其中一列数值映射到fill上
ggplot(crime_map, aes(x=long, y=lat, group=group, fill=Assault)) +
geom_polygon(colour="black") +
coord_map("polyconic")
ggplot(crimes, aes(map_id = state, fill=Assault)) +
geom_map(map = states_map, colour="black") +
scale_fill_gradient2(low="#559999", mid="grey90", high="#BB650B",
midpoint=median(crimes$Assault)) +
expand_limits(x = states_map$long, y = states_map$lat) +
coord_map("polyconic")
# 找到分位数的边界
qa <- quantile(crimes$Assault, c(0, 0.2, 0.4, 0.6, 0.8, 1.0))
qa
# 找到分位数的边界
qa <- quantile(crimes$Assault, c(0, 0.2, 0.4, 0.6, 0.8, 1.0))
qa
# 找到分位数的边界
qa <- quantile(crimes$Assault, c(0, 0.2, 0.4, 0.6, 0.8, 1.0))
qa
# 找到分位数的边界
qa <- quantile(crimes$Assault, c(0, 0.2, 0.4, 0.6, 0.8, 1.0))
qa
# 加入一个分位数类别的列
crimes$Assault_q <- cut(crimes$Assault, qa,
labels=c("0-20%", "20-408", "40-608", "60-808", "80-1008"),
include.lowest=TRUE)
crimes
# 找到分位数的边界
qa <- quantile(crimes$Assault, c(0, 0.2, 0.4, 0.6, 0.8, 1.0))
qa
# 加入一个分位数类别的列
crimes$Assault_q <- cut(crimes$Assault, qa,
labels=c("0-20%", "20-408", "40-608", "60-808", "80-1008"),
include.lowest=TRUE)
head(crimes)
# 找到分位数的边界
qa <- quantile(crimes$Assault, c(0, 0.2, 0.4, 0.6, 0.8, 1.0))
qa
# 加入一个分位数类别的列
crimes$Assault_q <- cut(crimes$Assault, qa,
labels=c("0-20%", "20-408", "40-608", "60-808", "80-1008"),
include.lowest=TRUE)
head(crimes)
# 产生一个有5个离散取值的调色板
pal <- colorRampPalette(c("#559999"，"grey80","#BB650B"))(5)
# 找到分位数的边界
qa <- quantile(crimes$Assault, c(0, 0.2, 0.4, 0.6, 0.8, 1.0))
qa
# 加入一个分位数类别的列
crimes$Assault_q <- cut(crimes$Assault, qa,
labels=c("0-20%", "20-408", "40-608", "60-808", "80-1008"),
include.lowest=TRUE)
head(crimes)
# 产生一个有5个离散取值的调色板
pal <- colorRampPalette(c("#559999","grey80","#BB650B"))(5)
pal
# 找到分位数的边界
qa <- quantile(crimes$Assault, c(0, 0.2, 0.4, 0.6, 0.8, 1.0))
qa
# 加入一个分位数类别的列
crimes$Assault_q <- cut(crimes$Assault, qa,
labels=c("0-20%", "20-408", "40-608", "60-808", "80-1008"),
include.lowest=TRUE)
head(crimes)
# 产生一个有5个离散取值的调色板
pal <- colorRampPalette(c("#559999","grey80","#BB650B"))(5)
ggplot(crimes, aes(map_id = state, fill=Assault_q)) +
geom_map(map = states_map, colour="black") +
scale_fill_manual(values=pal) +
expand_limits(x = states_map$long, y= states_map$lat) +
coord_map("polyconic") +
labs(fill="Assault RatelnPercentile")
# crimes中'state'列要和states_map中的'region'列匹配
ggplot(crimes, aes(map_id = state, fill=Assault)) +
geom_map(map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) +
coord_map("polyconic")
# 创建一个去掉了很多背景元素的主题
theme_clean <- function(base_size = 12) {
require(grid) # unit()函数需要
theme_grey(base_size) %+replace%
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks.length = unit(0, "cm"),
axis.ticks.margin = unit(0, "cm"),
panel.margin = unit(0, "lines"),
plot.margin = unit(c(0, 0, 0, 0), "lines"),
complete = TRUE
)
}
ggplot(crimes, aes(map_id = state, fill=Assault_q)) +
geom_map(map = states_map, colour="black") +
scale_fill_manual(values=pal) +
expand_limits(x = states_map$long, y = states_map$lat) +
coord_map("polyconic") +
labs(fill="Assault RatelnPercentile") +
theme_clean()
install.packages('maptools')
library(maptools)
# 载入空间数据并转化成数据框
uk_shp <- readshapePoly("GBR adm/GBR_adm2.shp")
library(maptools)
# 载入空间数据并转化成数据框
uk_shp <- readShapePoly("GBR adm/GBR_adm2.shp")
# 为了使用数据集
library(gcookbook)
head(madmen2)
# 从数据集中生成图对象
g1 <- graph.data.frame(madmen2, directed=TRUE)
# 移除多余的空白边
par(mar=c(0,0,0,0))
plot(g1, layout=layout.fruchterman.reingold, vertex.linewidth=8, edge.arrow.size=0.5, vertex.label=NA)
# 为了使用数据集
library(gcookbook)
head(madmen2)
# 从数据集中生成图对象
g1 <- graph.data.frame(madmen2, directed=TRUE)
# 移除多余的空白边
par(mar=c(0,0,0,0))
plot(g1, layout=layout.fruchterman.reingold, vertex.size=8, edge.arrow.size=0.5, vertex.label=NA)
# 使用arrow()，需要加载grid包
library(grid)
# 用子集画图，箭头的长度为0.1cm
ggplot(islicesub, aes(x=x, y=y)) +
geom_segment(aes(xend = x+vx/50, yend = y+vy/50),
arrow = arrow(length = unit(0.1, "cm")), linewidth = 0.25)
# x和y中每5个值保留1个，z中每两个值保留一个
keepx <- every_n(unique(isabel$x), by=5)
keepy <- every_n(unique(isabel$y), by=5)
keepz <- every_n(unique(isabel$z), by=2)
isub <- subset(isabel, x %in% keepx & y %in% keepy & z %in% keepz)
ggplot(isub, aes(x=x, y=y)) +
geom_segment(aes(xend = x+vx/50, yend = y+vy/50, colour = speed),
arrow = arrow(length = unit(0.1, "cm")), linewidth = 0.5) +
scale_colour_continuous(low="grey80", high="darkred") +
facet_wrap( ~ z)
# 创建一个去掉了很多背景元素的主题
theme_clean <- function(base_size = 12) {
require(grid) # unit()函数需要
theme_grey(base_size) %+replace%
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks.length = unit(0, "cm"),
axis.text = unit(0, "cm"),
panel.margin = unit(0, "lines"),
plot.margin = unit(c(0, 0, 0, 0), "lines"),
complete = TRUE
)
}
ggplot(crimes, aes(map_id = state, fill=Assault_q)) +
geom_map(map = states_map, colour="black") +
scale_fill_manual(values=pal) +
expand_limits(x = states_map$long, y = states_map$lat) +
coord_map("polyconic") +
labs(fill="Assault RatelnPercentile") +
theme_clean()
# 创建一个去掉了很多背景元素的主题
theme_clean <- function(base_size = 12) {
require(grid) # unit()函数需要
theme_grey(base_size) %+replace%
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks.length = unit(0, "cm"),
axis.ticks.margin = unit(0, "cm"),
panel.margin = unit(0, "lines"),
plot.margin = unit(c(0, 0, 0, 0), "lines"),
complete = TRUE
)
}
ggplot(crimes, aes(map_id = state, fill=Assault_q)) +
geom_map(map = states_map, colour="black") +
scale_fill_manual(values=pal) +
expand_limits(x = states_map$long, y = states_map$lat) +
coord_map("polyconic") +
labs(fill="Assault RatelnPercentile") +
theme_clean()
?axis.ticks.margin
??axis.ticks.margin
?theme()
# 创建一个去掉了很多背景元素的主题
theme_clean <- function(base_size = 12) {
require(grid) # unit()函数需要
theme_grey(base_size) %+replace%
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks.length = unit(0, "cm"),
axis.ticks.margin = unit(0, "cm"),
panel.spacing = unit(0, "lines"),
plot.margin = unit(c(0, 0, 0, 0), "lines"),
complete = TRUE
)
}
ggplot(crimes, aes(map_id = state, fill=Assault_q)) +
geom_map(map = states_map, colour="black") +
scale_fill_manual(values=pal) +
expand_limits(x = states_map$long, y = states_map$lat) +
coord_map("polyconic") +
labs(fill="Assault RatelnPercentile") +
theme_clean()
# 创建一个去掉了很多背景元素的主题
theme_clean <- function(base_size = 12) {
require(grid) # unit()函数需要
theme_grey(base_size) %+replace%
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks.length = unit(0, "cm"),
axis.ticks.text = unit(0, "cm"),
panel.spacing = unit(0, "lines"),
plot.margin = unit(c(0, 0, 0, 0), "lines"),
complete = TRUE
)
}
ggplot(crimes, aes(map_id = state, fill=Assault_q)) +
geom_map(map = states_map, colour="black") +
scale_fill_manual(values=pal) +
expand_limits(x = states_map$long, y = states_map$lat) +
coord_map("polyconic") +
labs(fill="Assault RatelnPercentile") +
theme_clean()
# 创建一个去掉了很多背景元素的主题
theme_clean <- function(base_size = 12) {
require(grid) # unit()函数需要
theme_grey(base_size) %+replace%
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks.length = unit(0, "cm"),
axis.ticks.margin = unit(0, "cm"),
panel.spacing = unit(0, "lines"),
plot.margin = unit(c(0, 0, 0, 0), "lines"),
complete = TRUE
)
}
ggplot(crimes, aes(map_id = state, fill=Assault_q)) +
geom_map(map = states_map, colour="black") +
scale_fill_manual(values=pal) +
expand_limits(x = states_map$long, y = states_map$lat) +
coord_map("polyconic") +
labs(fill="Assault RatelnPercentile") +
theme_clean()
# 创建一个去掉了很多背景元素的主题
theme_clean <- function(base_size = 12) {
require(grid) # unit()函数需要
theme_grey(base_size) %+replace%
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks.length = unit(0, "cm"),
axis.text.x = element_text(margin = margin(unit=(0, "cm")),
# 创建一个去掉了很多背景元素的主题
theme_clean <- function(base_size = 12) {
require(grid) # unit()函数需要
theme_grey(base_size) %+replace%
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks.length = unit(0, "cm"),
axis.text.x = element_text(margin = margin(unit= "cm")),
panel.spacing = unit(0, "lines"),
plot.margin = unit(c(0, 0, 0, 0), "lines"),
complete = TRUE
)
}
ggplot(crimes, aes(map_id = state, fill=Assault_q)) +
geom_map(map = states_map, colour="black") +
scale_fill_manual(values=pal) +
expand_limits(x = states_map$long, y = states_map$lat) +
coord_map("polyconic") +
labs(fill="Assault RatelnPercentile") +
theme_clean()
knitr::opts_chunk$set(prompt=TRUE,comment='',echo=TRUE,collapse=TRUE,message=FALSE,warning=FALSE)
# width(宽度)和height(高度)的单位为英寸
pdf("myplot-14.1.pdf", width=4, height=4)
# 绘制图形
plot(mtcars$wt, mtcars$mpg)
print(ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point())
dev.off()
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# 默认单位为英寸，不过也可指定单位
ggsave("myplot-14.1.2.pdf", width=8, height=8, units="cm")
# 方法一
#svg("myplot-14.2.svg", width=4, height=4)
#plot(...)
#dev.off()
# 方法二
ggsave("myplot14.2.svg", width=8, height=8, units="cm")
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# 方法一
#svg("myplot-14.2.svg", width=4, height=4)
#plot(...)
#dev.off()
# 方法二
ggsave("myplot14.2.svg", width=8, height=8, units="cm")
?ggsave
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# 默认单位为英寸，不过也可指定单位
ggsave("myplot-14.1.1.pdf", width=8, height=8, units="cm")
ggsave("myplot-14.1.1.png", width=6, height=6)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
# 默认单位为英寸，不过也可指定单位
ggsave("myplot-14.1.1.pdf", width=8, height=8, units="cm",dpi = 300)
ggsave("myplot-14.1.1.png", width=6, height=6)
# 查找并保存系统中已安装字体的信息
font_import ()
# 查找并保存系统中已安装字体的信息
#font_import()
# 列出字体
fonts()
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() +
ggtitle("Title text goes here") +
theme(text = element_text(size = 16, family="Arial"))
ggsave ("myplot-14.2.pdf", width=6, height=6,units="cm",dpi = 300)
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() +
ggtitle("Title text goes here") +
theme(text = element_text(size = 16, family="Arial"))
ggsave("myplot-14.2.pdf", width=6, height=6,units="cm",dpi = 300)
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() +
ggtitle("Title text goes here") +
theme(text = element_text(size = 16, family="Arial"))
ggsave("myplot-14.2.pdf", width=6, height=6)
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() +
ggtitle("Title text goes here") +
theme(text = element_text(size = 16, family="Arial"))
ggsave("myplot-14.2.pdf", width=6, height=6,units="cm",dpi = 300)
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() +
ggtitle("Title text goes here") +
theme(text = element_text(size = 16, family="Geneva"))
ggsave("myplot-14.2.pdf", width=6, height=6,units="cm",dpi = 300)
install.packages('showtext')
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Gochi Hand", "gochi")
font_add_google("Schoolbell", "bell")
## Automatically use showtext to render text
showtext_auto()
set.seed(123)
hist(rnorm(1000), breaks = 30, col = "steelblue", border = "white",
main = "", xlab = "", ylab = "")
title("Histogram of Normal Random Numbers", family = "bell", cex.main = 2)
title(ylab = "Frequency", family = "gochi", cex.lab = 2)
text(2, 70, "N = 1000", family = "bell", cex = 2.5)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Gochi Hand", "gochi")
font_add_google("Schoolbell", "bell")
## Automatically use showtext to render text
showtext_auto()
set.seed(123)
hist(rnorm(1000), breaks = 30, col = "steelblue", border = "white",
main = "", xlab = "", ylab = "")
title("Histogram of Normal Random Numbers", family = "bell", cex.main = 2)
title(ylab = "Frequency", family = "gochi", cex.lab = 2)
text(2, 70, "N = 1000", family = "bell", cex = 2.5)
ggsave("myplot-14.2.pdf", width=6, height=6,units="cm",dpi = 300)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Gochi Hand", "gochi")
font_add_google("Schoolbell", "bell")
## Automatically use showtext to render text
showtext_auto()
set.seed(123)
hist(rnorm(1000), breaks = 30, col = "steelblue", border = "white",
main = "", xlab = "", ylab = "")
title("Histogram of Normal Random Numbers", family = "bell", cex.main = 2)
title(ylab = "Frequency", family = "gochi", cex.lab = 2)
text(2, 70, "N = 1000", family = "bell", cex = 2.5)
ggsave("myplot-14.2.pdf", width=6, height=6,units="cm",dpi = 300)
